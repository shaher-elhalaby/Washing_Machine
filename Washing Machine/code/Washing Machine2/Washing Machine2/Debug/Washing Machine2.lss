
Washing Machine2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000019c4  00001a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  008000b2  008000b2  00001aaa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004840  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001629  00000000  00000000  000066a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021bd  00000000  00000000  00007cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00009e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001215  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002524  00000000  00000000  0000b855  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000dd79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_1>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_7>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	7b 00       	.word	0x007b	; ????
      56:	89 02       	muls	r24, r25
      58:	83 00       	.word	0x0083	; ????
      5a:	9c 01       	movw	r18, r24
      5c:	ea 00       	.word	0x00ea	; ????
      5e:	2d 01       	movw	r4, r26
      60:	6a 01       	movw	r12, r20
      62:	48 02       	muls	r20, r24
      64:	ce 01       	movw	r24, r28
      66:	0b 02       	muls	r16, r27
      68:	b7 00       	.word	0x00b7	; ????
      6a:	7b 00       	.word	0x007b	; ????
      6c:	ba 02       	muls	r27, r26
      6e:	83 00       	.word	0x0083	; ????
      70:	9c 01       	movw	r18, r24
      72:	ea 00       	.word	0x00ea	; ????
      74:	2d 01       	movw	r4, r26
      76:	6a 01       	movw	r12, r20
      78:	48 02       	muls	r20, r24
      7a:	ce 01       	movw	r24, r28
      7c:	0b 02       	muls	r16, r27
      7e:	b7 00       	.word	0x00b7	; ????

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf e5       	ldi	r28, 0x5F	; 95
      86:	d8 e0       	ldi	r29, 0x08	; 8
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	10 e0       	ldi	r17, 0x00	; 0
      8e:	a0 e6       	ldi	r26, 0x60	; 96
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	e4 ec       	ldi	r30, 0xC4	; 196
      94:	f9 e1       	ldi	r31, 0x19	; 25
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	a2 3b       	cpi	r26, 0xB2	; 178
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	a2 eb       	ldi	r26, 0xB2	; 178
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	ae 32       	cpi	r26, 0x2E	; 46
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 1b 06 	call	0xc36	; 0xc36 <main>
      b6:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <sys_update>:

uint8_t state_changed=0;

void sys_update(void)
{	
	if(ERROR_FLAG==0)
      be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <ERROR_FLAG>
      c2:	81 11       	cpse	r24, r1
      c4:	26 c2       	rjmp	.+1100   	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
	{
		if (sys_state==start||sys==inProcess)
      c6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <sys_state>
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	09 f4       	brne	.+2      	; 0xd0 <sys_update+0x12>
      ce:	5d c2       	rjmp	.+1210   	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
      d0:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <sys>
      d4:	91 30       	cpi	r25, 0x01	; 1
      d6:	09 f0       	breq	.+2      	; 0xda <sys_update+0x1c>
      d8:	0b c2       	rjmp	.+1046   	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		{
			switch(sys_stage)
      da:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      de:	8e 2f       	mov	r24, r30
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fc 01       	movw	r30, r24
      e4:	74 97       	sbiw	r30, 0x14	; 20
      e6:	eb 30       	cpi	r30, 0x0B	; 11
      e8:	f1 05       	cpc	r31, r1
      ea:	08 f0       	brcs	.+2      	; 0xee <sys_update+0x30>
      ec:	12 c2       	rjmp	.+1060   	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
      ee:	e6 5d       	subi	r30, 0xD6	; 214
      f0:	ff 4f       	sbci	r31, 0xFF	; 255
      f2:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__tablejump2__>
			{
				case idle:
				sys_stage=fill01;
      f6:	86 e1       	ldi	r24, 0x16	; 22
      f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				time_stage=0;
      fc:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     100:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
				break;
     104:	06 c2       	rjmp	.+1036   	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
				case fill01:
					if (++time_stage>=MaxFillTime)
     106:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     10a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     10e:	01 96       	adiw	r24, 0x01	; 1
     110:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     114:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     118:	44 97       	sbiw	r24, 0x14	; 20
     11a:	18 f0       	brcs	.+6      	; 0x122 <sys_update+0x64>
					{
						ERROR_FLAG=1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <ERROR_FLAG>
					}
					strcpy((char*)dis.state,"Fill");
     122:	85 e0       	ldi	r24, 0x05	; 5
     124:	e1 e6       	ldi	r30, 0x61	; 97
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	ad ef       	ldi	r26, 0xFD	; 253
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	01 90       	ld	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	8a 95       	dec	r24
     132:	e1 f7       	brne	.-8      	; 0x12c <sys_update+0x6e>
					sys=inProcess;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
					Control_Door_Lock(ON);
     13a:	0e 94 88 04 	call	0x910	; 0x910 <Control_Door_Lock>
					Control_Water_Valve(ON);
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	0e 94 df 04 	call	0x9be	; 0x9be <Control_Water_Valve>
					if(Read_Water_Level()==Water_Full)
     144:	0e 94 4a 04 	call	0x894	; 0x894 <Read_Water_Level>
     148:	84 30       	cpi	r24, 0x04	; 4
     14a:	09 f0       	breq	.+2      	; 0x14e <sys_update+0x90>
     14c:	e2 c1       	rjmp	.+964    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Water_Valve(OFF);
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 df 04 	call	0x9be	; 0x9be <Control_Water_Valve>
						state_changed=1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=HEAT;
     15a:	8e e1       	ldi	r24, 0x1E	; 30
     15c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     160:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     164:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     168:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     16c:	d2 c1       	rjmp	.+932    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case HEAT:
					if (++time_stage>=MaxHeatTime)
     16e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     172:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     17c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     180:	80 39       	cpi	r24, 0x90	; 144
     182:	91 40       	sbci	r25, 0x01	; 1
     184:	18 f0       	brcs	.+6      	; 0x18c <sys_update+0xce>
					{
						ERROR_FLAG=1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <ERROR_FLAG>
					}
					sys=inProcess;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
					strcpy((char*)dis.state,"Heat");
     192:	85 e0       	ldi	r24, 0x05	; 5
     194:	e6 e6       	ldi	r30, 0x66	; 102
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	ad ef       	ldi	r26, 0xFD	; 253
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	8a 95       	dec	r24
     1a2:	e1 f7       	brne	.-8      	; 0x19c <sys_update+0xde>
					Control_Water_Heater(ON);
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Control_Water_Heater>
					if(Read_Water_Temperature()>=temperature)
     1aa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Read_Water_Temperature>
     1ae:	80 35       	cpi	r24, 0x50	; 80
     1b0:	08 f4       	brcc	.+2      	; 0x1b4 <sys_update+0xf6>
     1b2:	af c1       	rjmp	.+862    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Water_Heater(OFF);
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Control_Water_Heater>
						state_changed=1;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=wash01;
     1c0:	88 e1       	ldi	r24, 0x18	; 24
     1c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     1c6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     1ca:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     1ce:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     1d2:	9f c1       	rjmp	.+830    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case wash01:
					if(++time_stage<OP_Time)
     1d4:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     1d8:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     1e2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     1e6:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <OP_Time>
     1ea:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     1ee:	82 17       	cp	r24, r18
     1f0:	93 07       	cpc	r25, r19
     1f2:	f8 f4       	brcc	.+62     	; 0x232 <sys_update+0x174>
					{
						sys=inProcess;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
						strcpy((char*)dis.state,"Wash");
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	eb e6       	ldi	r30, 0x6B	; 107
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	ad ef       	ldi	r26, 0xFD	; 253
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	01 90       	ld	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <sys_update+0x146>
						Control_Motor(128,RIGHT);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
						Control_Detergent_Hatch(ON);
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	0e 94 81 04 	call	0x902	; 0x902 <Control_Detergent_Hatch>
					}
					if(time_stage>=OP_Time)
     21a:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <time_stage>
     21e:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <time_stage+0x1>
     222:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <OP_Time>
     226:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     22a:	28 17       	cp	r18, r24
     22c:	39 07       	cpc	r19, r25
     22e:	08 f4       	brcc	.+2      	; 0x232 <sys_update+0x174>
     230:	70 c1       	rjmp	.+736    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Motor(OFF,OFF);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
						Control_Detergent_Hatch(OFF);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	0e 94 81 04 	call	0x902	; 0x902 <Control_Detergent_Hatch>
						state_changed=1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=wash02;
     246:	89 e1       	ldi	r24, 0x19	; 25
     248:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     24c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     250:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     254:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     258:	5c c1       	rjmp	.+696    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case wash02:
					if(++time_stage<OP_Time)
     25a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     25e:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     268:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     26c:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <OP_Time>
     270:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     274:	82 17       	cp	r24, r18
     276:	93 07       	cpc	r25, r19
     278:	e0 f4       	brcc	.+56     	; 0x2b2 <sys_update+0x1f4>
					{
						sys=inProcess;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
						strcpy((char*)dis.state,"Wash");
     280:	85 e0       	ldi	r24, 0x05	; 5
     282:	eb e6       	ldi	r30, 0x6B	; 107
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ad ef       	ldi	r26, 0xFD	; 253
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	01 90       	ld	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	8a 95       	dec	r24
     290:	e1 f7       	brne	.-8      	; 0x28a <sys_update+0x1cc>
						Control_Motor(128,LEFT);
     292:	62 e0       	ldi	r22, 0x02	; 2
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
					}
					if(time_stage>=OP_Time)
     29a:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <time_stage>
     29e:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <time_stage+0x1>
     2a2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <OP_Time>
     2a6:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     2aa:	28 17       	cp	r18, r24
     2ac:	39 07       	cpc	r19, r25
     2ae:	08 f4       	brcc	.+2      	; 0x2b2 <sys_update+0x1f4>
     2b0:	30 c1       	rjmp	.+608    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Motor(OFF,OFF);
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
						state_changed=1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=drain01;
     2c0:	8a e1       	ldi	r24, 0x1A	; 26
     2c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     2c6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     2ca:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     2ce:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     2d2:	1f c1       	rjmp	.+574    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case drain01:
					if (++time_stage>=MaxFillTime)
     2d4:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     2d8:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     2e2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     2e6:	44 97       	sbiw	r24, 0x14	; 20
     2e8:	18 f0       	brcs	.+6      	; 0x2f0 <sys_update+0x232>
					{
						ERROR_FLAG=1;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <ERROR_FLAG>
					}
					sys=inProcess;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
					strcpy((char*)dis.state,"Drain");
     2f6:	86 e0       	ldi	r24, 0x06	; 6
     2f8:	e0 e7       	ldi	r30, 0x70	; 112
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	ad ef       	ldi	r26, 0xFD	; 253
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	01 90       	ld	r0, Z+
     302:	0d 92       	st	X+, r0
     304:	8a 95       	dec	r24
     306:	e1 f7       	brne	.-8      	; 0x300 <sys_update+0x242>
					Control_Pump(ON);
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Control_Pump>
					if(Read_Water_Level()==Water_Empety)
     30e:	0e 94 4a 04 	call	0x894	; 0x894 <Read_Water_Level>
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	09 f0       	breq	.+2      	; 0x318 <sys_update+0x25a>
     316:	fd c0       	rjmp	.+506    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Pump(OFF);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Control_Pump>
						state_changed=1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=fill02;
     324:	87 e1       	ldi	r24, 0x17	; 23
     326:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     32a:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     32e:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     332:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     336:	ed c0       	rjmp	.+474    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case fill02:
					if (++time_stage>=MaxFillTime)
     338:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     33c:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     346:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     34a:	44 97       	sbiw	r24, 0x14	; 20
     34c:	18 f0       	brcs	.+6      	; 0x354 <sys_update+0x296>
					{
						ERROR_FLAG=1;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <ERROR_FLAG>
					}
					sys=inProcess;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
					strcpy((char*)dis.state,"Fill");
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	e1 e6       	ldi	r30, 0x61	; 97
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	ad ef       	ldi	r26, 0xFD	; 253
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	01 90       	ld	r0, Z+
     366:	0d 92       	st	X+, r0
     368:	8a 95       	dec	r24
     36a:	e1 f7       	brne	.-8      	; 0x364 <sys_update+0x2a6>
					Control_Water_Valve(ON);
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 df 04 	call	0x9be	; 0x9be <Control_Water_Valve>
					if(Read_Water_Level()==Water_Full)
     372:	0e 94 4a 04 	call	0x894	; 0x894 <Read_Water_Level>
     376:	84 30       	cpi	r24, 0x04	; 4
     378:	09 f0       	breq	.+2      	; 0x37c <sys_update+0x2be>
     37a:	cb c0       	rjmp	.+406    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Water_Valve(OFF);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 df 04 	call	0x9be	; 0x9be <Control_Water_Valve>
						state_changed=1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=raise01;
     388:	8c e1       	ldi	r24, 0x1C	; 28
     38a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     38e:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     392:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     396:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     39a:	bb c0       	rjmp	.+374    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
					case raise01:
					if(++time_stage<OP_Time)
     39c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     3a0:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     3aa:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     3ae:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <OP_Time>
     3b2:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     3b6:	82 17       	cp	r24, r18
     3b8:	93 07       	cpc	r25, r19
     3ba:	e0 f4       	brcc	.+56     	; 0x3f4 <sys_update+0x336>
					{
						sys=inProcess;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
						strcpy((char*)dis.state,"Raise");
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	e6 e7       	ldi	r30, 0x76	; 118
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	ad ef       	ldi	r26, 0xFD	; 253
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	01 90       	ld	r0, Z+
     3ce:	0d 92       	st	X+, r0
     3d0:	8a 95       	dec	r24
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <sys_update+0x30e>
						Control_Motor(255,RIGHT);
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
					}
					if(time_stage>=OP_Time)
     3dc:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <time_stage>
     3e0:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <time_stage+0x1>
     3e4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <OP_Time>
     3e8:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     3ec:	28 17       	cp	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	08 f4       	brcc	.+2      	; 0x3f4 <sys_update+0x336>
     3f2:	8f c0       	rjmp	.+286    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Motor(OFF,OFF);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
						state_changed=1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=raise02;
     402:	8d e1       	ldi	r24, 0x1D	; 29
     404:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     408:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     40c:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     410:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     414:	7e c0       	rjmp	.+252    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case raise02:
					if(++time_stage<OP_Time)
     416:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     41a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     424:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     428:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <OP_Time>
     42c:	30 91 b5 00 	lds	r19, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	e0 f4       	brcc	.+56     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
					{
						sys=inProcess;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
						strcpy((char*)dis.state,"Raise");
     43c:	86 e0       	ldi	r24, 0x06	; 6
     43e:	e6 e7       	ldi	r30, 0x76	; 118
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ad ef       	ldi	r26, 0xFD	; 253
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	01 90       	ld	r0, Z+
     448:	0d 92       	st	X+, r0
     44a:	8a 95       	dec	r24
     44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
						Control_Motor(255,LEFT);
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
					}
					if(time_stage>=OP_Time)
     456:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <time_stage>
     45a:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <time_stage+0x1>
     45e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <OP_Time>
     462:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <OP_Time+0x1>
     466:	28 17       	cp	r18, r24
     468:	39 07       	cpc	r19, r25
     46a:	08 f4       	brcc	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	52 c0       	rjmp	.+164    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Motor(OFF,OFF);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
						state_changed=1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
						sys_stage=drain02;
     47c:	8b e1       	ldi	r24, 0x1B	; 27
     47e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys=outProcess;
     482:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     486:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     48a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     48e:	41 c0       	rjmp	.+130    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					}
					break;
				case drain02:
					if (++time_stage>=MaxFillTime)
     490:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <time_stage>
     494:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <time_stage+0x1>
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     49e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     4a2:	44 97       	sbiw	r24, 0x14	; 20
     4a4:	18 f0       	brcs	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
					{
						ERROR_FLAG=1;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <ERROR_FLAG>
					}
					sys=inProcess;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
					strcpy((char*)dis.state,"Drain");
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	e0 e7       	ldi	r30, 0x70	; 112
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	ad ef       	ldi	r26, 0xFD	; 253
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	01 90       	ld	r0, Z+
     4be:	0d 92       	st	X+, r0
     4c0:	8a 95       	dec	r24
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
					Control_Pump(ON);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Control_Pump>
					if(Read_Water_Level()==Water_Empety)
     4ca:	0e 94 4a 04 	call	0x894	; 0x894 <Read_Water_Level>
     4ce:	83 30       	cpi	r24, 0x03	; 3
     4d0:	01 f5       	brne	.+64     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
					{
						Control_Pump(OFF);
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Control_Pump>
						state_changed=1;
						sys_stage=idle;
     4d8:	84 e1       	ldi	r24, 0x14	; 20
     4da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						sys_state=OFF;
     4de:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <sys_state>
						sys=outProcess;
     4e2:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <sys>
						time_stage=0;
     4e6:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <time_stage+0x1>
     4ea:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <time_stage>
     4ee:	15 c0       	rjmp	.+42     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
					}
					break;
			}
		}
		else if (sys_state==pause&&sys==outProcess)
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	79 f4       	brne	.+30     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     4f4:	91 11       	cpse	r25, r1
     4f6:	3e c0       	rjmp	.+124    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		{
			state_changed=1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
			strcpy((char*)dis.state,"Paused");
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	ec e7       	ldi	r30, 0x7C	; 124
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ad ef       	ldi	r26, 0xFD	; 253
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	8a 95       	dec	r24
     50e:	e1 f7       	brne	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     510:	31 c0       	rjmp	.+98     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		}
	}
	if (sys_state==OFF)
     512:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <sys_state>
     516:	81 11       	cpse	r24, r1
     518:	2d c0       	rjmp	.+90     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
	{
		strcpy((char*)dis.state,"Idle");
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	e3 e8       	ldi	r30, 0x83	; 131
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	ad ef       	ldi	r26, 0xFD	; 253
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	01 90       	ld	r0, Z+
     526:	0d 92       	st	X+, r0
     528:	8a 95       	dec	r24
     52a:	e1 f7       	brne	.-8      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		state_changed=1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state_changed>
		Control_Door_Lock(OFF);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 88 04 	call	0x910	; 0x910 <Control_Door_Lock>
		switch(Read_Selector_Dial())
     538:	0e 94 3f 04 	call	0x87e	; 0x87e <Read_Selector_Dial>
     53c:	88 23       	and	r24, r24
     53e:	19 f0       	breq	.+6      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	41 f0       	breq	.+16     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     544:	0d c0       	rjmp	.+26     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		{
			case COTTON:
			OP_Time=40;
     546:	88 e2       	ldi	r24, 0x28	; 40
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <OP_Time+0x1>
     54e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <OP_Time>
			break;
     552:	06 c0       	rjmp	.+12     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			case WOOL:
			OP_Time=20;
     554:	84 e1       	ldi	r24, 0x14	; 20
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <OP_Time+0x1>
     55c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <OP_Time>
			break;
		}
		EEPROM_Write(0x05,OP_Time);
     560:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <OP_Time>
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	8a 95       	dec	r24
     570:	f1 f7       	brne	.-4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     572:	00 00       	nop
		_delay_us(10);
	}
	EEPROM_Write(0x06,time_stage);
     574:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <time_stage>
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     580:	23 e0       	ldi	r18, 0x03	; 3
     582:	2a 95       	dec	r18
     584:	f1 f7       	brne	.-4      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     586:	00 00       	nop
	_delay_us(10);
}
     588:	08 95       	ret
{	
	if(ERROR_FLAG==0)
	{
		if (sys_state==start||sys==inProcess)
		{
			switch(sys_stage)
     58a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     58e:	8e 2f       	mov	r24, r30
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	fc 01       	movw	r30, r24
     594:	74 97       	sbiw	r30, 0x14	; 20
     596:	eb 30       	cpi	r30, 0x0B	; 11
     598:	f1 05       	cpc	r31, r1
     59a:	60 f7       	brcc	.-40     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     59c:	eb 5c       	subi	r30, 0xCB	; 203
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__tablejump2__>

000005a4 <sys_init>:
	EEPROM_Write(0x06,time_stage);
	_delay_us(10);
}

void sys_init(void)
{
     5a4:	0f 93       	push	r16
     5a6:	cf 93       	push	r28
	uint8 Boot=0,error;
	
	lcd1.LCD_Control=GPIOA;
     5a8:	eb e0       	ldi	r30, 0x0B	; 11
     5aa:	f1 e0       	ldi	r31, 0x01	; 1
     5ac:	89 e3       	ldi	r24, 0x39	; 57
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
	lcd1.LCD_Data   =GPIOC;
     5b4:	83 e3       	ldi	r24, 0x33	; 51
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	96 83       	std	Z+6, r25	; 0x06
     5ba:	85 83       	std	Z+5, r24	; 0x05
	lcd1.RS         =PIN5;
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	82 83       	std	Z+2, r24	; 0x02
	lcd1.RW         =PIN6;
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	83 83       	std	Z+3, r24	; 0x03
	lcd1.E          =PIN7;
     5c4:	87 e0       	ldi	r24, 0x07	; 7
     5c6:	84 83       	std	Z+4, r24	; 0x04
	
	dis.funp=Read_Water_Temperature;
     5c8:	ad ef       	ldi	r26, 0xFD	; 253
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	89 e6       	ldi	r24, 0x69	; 105
     5ce:	94 e0       	ldi	r25, 0x04	; 4
     5d0:	19 96       	adiw	r26, 0x09	; 9
     5d2:	9c 93       	st	X, r25
     5d4:	8e 93       	st	-X, r24
     5d6:	18 97       	sbiw	r26, 0x08	; 8
	dis.lcd=&lcd1;
     5d8:	1d 96       	adiw	r26, 0x0d	; 13
     5da:	fc 93       	st	X, r31
     5dc:	ee 93       	st	-X, r30
     5de:	1c 97       	sbiw	r26, 0x0c	; 12
	dis.RTC=&RTC1;
     5e0:	82 e1       	ldi	r24, 0x12	; 18
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	1b 96       	adiw	r26, 0x0b	; 11
     5e6:	9c 93       	st	X, r25
     5e8:	8e 93       	st	-X, r24
     5ea:	1a 97       	sbiw	r26, 0x0a	; 10
	strcpy((char*)dis.state,"idle");
     5ec:	85 e0       	ldi	r24, 0x05	; 5
     5ee:	e8 e8       	ldi	r30, 0x88	; 136
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	01 90       	ld	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	8a 95       	dec	r24
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <sys_init+0x4e>
	
	I2C_Init(0X08,100000,I2C_INT_Disable,I2C_pre1);
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	40 ea       	ldi	r20, 0xA0	; 160
     600:	56 e8       	ldi	r21, 0x86	; 134
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <I2C_Init>
	ADC_Init(Free_Running, AVCC, ADC_No_Int, ADC_Pre2);
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	60 e4       	ldi	r22, 0x40	; 64
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 49 08 	call	0x1092	; 0x1092 <ADC_Init>
	RTC_Init(&RTC1);
     618:	82 e1       	ldi	r24, 0x12	; 18
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 0f 08 	call	0x101e	; 0x101e <RTC_Init>
	LCD_INIT(&lcd1);
     620:	8b e0       	ldi	r24, 0x0B	; 11
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 ff 06 	call	0xdfe	; 0xdfe <LCD_INIT>
	LCD_Clear(&lcd1);
     628:	8b e0       	ldi	r24, 0x0B	; 11
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 f9 07 	call	0xff2	; 0xff2 <LCD_Clear>
	T0_Init( T0_Fast, T0_NonInverting_OC0, T0_NoInterrupt, T0_FCPU64);
     630:	23 e0       	ldi	r18, 0x03	; 3
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	60 e2       	ldi	r22, 0x20	; 32
     636:	88 e4       	ldi	r24, 0x48	; 72
     638:	0e 94 a4 09 	call	0x1348	; 0x1348 <T0_Init>
	EX_INT_Enable(_INT0, Raising_INT0);
     63c:	63 e0       	ldi	r22, 0x03	; 3
     63e:	80 e4       	ldi	r24, 0x40	; 64
     640:	0e 94 70 08 	call	0x10e0	; 0x10e0 <EX_INT_Enable>
	
	PinDirection(GPIOB, OUTPUT,DOOR);
     644:	45 e0       	ldi	r20, 0x05	; 5
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	86 e3       	ldi	r24, 0x36	; 54
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	PinDirection(GPIOB, OUTPUT,PUMP);
     650:	44 e0       	ldi	r20, 0x04	; 4
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	86 e3       	ldi	r24, 0x36	; 54
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	PinDirection(GPIOB, OUTPUT,VAVLE);
     65c:	42 e0       	ldi	r20, 0x02	; 2
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	86 e3       	ldi	r24, 0x36	; 54
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	PinDirection(GPIOC, OUTPUT,M1);
     668:	42 e0       	ldi	r20, 0x02	; 2
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	83 e3       	ldi	r24, 0x33	; 51
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	PinDirection(GPIOC, OUTPUT,M2);
     674:	43 e0       	ldi	r20, 0x03	; 3
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	83 e3       	ldi	r24, 0x33	; 51
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	PinDirection(GPIOC, OUTPUT,ERRORpIN);
     680:	42 e0       	ldi	r20, 0x02	; 2
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	83 e3       	ldi	r24, 0x33	; 51
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	PinDirection(GPIOB, OUTPUT,HEATER);
     68c:	46 e0       	ldi	r20, 0x06	; 6
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	86 e3       	ldi	r24, 0x36	; 54
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
	
	Boot=EEPROM_Read(0x01);
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     6a0:	c8 2f       	mov	r28, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	8a 95       	dec	r24
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <sys_init+0x100>
     6a8:	00 00       	nop
	_delay_us(10);
	error=EEPROM_Read(0x07);
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	9a 95       	dec	r25
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <sys_init+0x110>
     6b8:	00 00       	nop
	_delay_us(10);
	if(Boot==0xFF ||error==1)
     6ba:	cf 3f       	cpi	r28, 0xFF	; 255
     6bc:	19 f0       	breq	.+6      	; 0x6c4 <sys_init+0x120>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <sys_init+0x120>
     6c2:	40 c0       	rjmp	.+128    	; 0x744 <sys_init+0x1a0>
	{
		EEPROM_Write(0x01,0);
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	8a 95       	dec	r24
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <sys_init+0x12c>
     6d4:	00 00       	nop
		_delay_us(10);
		EEPROM_Write(0x02,OFF);
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	9a 95       	dec	r25
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <sys_init+0x13e>
     6e6:	00 00       	nop
		_delay_us(10);
		EEPROM_Write(0x03,idle);
     6e8:	64 e1       	ldi	r22, 0x14	; 20
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	8a 95       	dec	r24
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <sys_init+0x150>
     6f8:	00 00       	nop
		_delay_us(10);
		EEPROM_Write(0x04,outProcess);
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	9a 95       	dec	r25
     708:	f1 f7       	brne	.-4      	; 0x706 <sys_init+0x162>
     70a:	00 00       	nop
		_delay_us(10);
		EEPROM_Write(0x05,0);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	8a 95       	dec	r24
     71a:	f1 f7       	brne	.-4      	; 0x718 <sys_init+0x174>
     71c:	00 00       	nop
		_delay_us(10);
		EEPROM_Write(0x06,0);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	86 e0       	ldi	r24, 0x06	; 6
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	9a 95       	dec	r25
     72c:	f1 f7       	brne	.-4      	; 0x72a <sys_init+0x186>
     72e:	00 00       	nop
		_delay_us(10);
		EEPROM_Write(0x07,0);
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	8a 95       	dec	r24
     73e:	f1 f7       	brne	.-4      	; 0x73c <sys_init+0x198>
     740:	00 00       	nop
     742:	34 c0       	rjmp	.+104    	; 0x7ac <sys_init+0x208>
		_delay_us(10);
	}
	else{
		sys_state=EEPROM_Read(0x02);
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     74c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <sys_state>
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	9a 95       	dec	r25
     754:	f1 f7       	brne	.-4      	; 0x752 <sys_init+0x1ae>
     756:	00 00       	nop
		_delay_us(10);
		sys_stage=EEPROM_Read(0x03);
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     760:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	8a 95       	dec	r24
     768:	f1 f7       	brne	.-4      	; 0x766 <sys_init+0x1c2>
     76a:	00 00       	nop
		_delay_us(10);
		sys=EEPROM_Read(0x04);
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     774:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <sys>
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	9a 95       	dec	r25
     77c:	f1 f7       	brne	.-4      	; 0x77a <sys_init+0x1d6>
     77e:	00 00       	nop
		_delay_us(10);
		OP_Time=EEPROM_Read(0x05);
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <OP_Time+0x1>
     78e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <OP_Time>
		time_stage=EEPROM_Read(0x06);
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_Read>
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <time_stage+0x1>
     7a0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <time_stage>
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	8a 95       	dec	r24
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <sys_init+0x202>
     7aa:	00 00       	nop
		_delay_us(10);
	}
}
     7ac:	cf 91       	pop	r28
     7ae:	0f 91       	pop	r16
     7b0:	08 95       	ret

000007b2 <save_state>:
void save_state(void)
{
	if(state_changed==1)
     7b2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <state_changed>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	41 f5       	brne	.+80     	; 0x80a <save_state+0x58>
	{
	EEPROM_Write(0x02,sys_state);
     7ba:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <sys_state>
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     7c6:	83 e0       	ldi	r24, 0x03	; 3
     7c8:	8a 95       	dec	r24
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <save_state+0x16>
     7cc:	00 00       	nop
	_delay_us(10);
	EEPROM_Write(0x03,sys_stage);
     7ce:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	8a 95       	dec	r24
     7de:	f1 f7       	brne	.-4      	; 0x7dc <save_state+0x2a>
     7e0:	00 00       	nop
	_delay_us(10);
	EEPROM_Write(0x04,sys);
     7e2:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <sys>
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	8a 95       	dec	r24
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <save_state+0x3e>
     7f4:	00 00       	nop
	_delay_us(10);
	EEPROM_Write(0x07,ERROR_FLAG);
     7f6:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <ERROR_FLAG>
     7fa:	87 e0       	ldi	r24, 0x07	; 7
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_Write>
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	8a 95       	dec	r24
     806:	f1 f7       	brne	.-4      	; 0x804 <save_state+0x52>
     808:	00 00       	nop
     80a:	08 95       	ret

0000080c <Display2>:
	}
}

void Display2(void)
{
	RTC_Read(dis.RTC);
     80c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dis+0xa>
     810:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <dis+0xb>
     814:	0e 94 1d 08 	call	0x103a	; 0x103a <RTC_Read>
	Display(&dis);
     818:	8d ef       	ldi	r24, 0xFD	; 253
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Display>
     820:	08 95       	ret

00000822 <BinkError>:
}
void BinkError(void)
{
	if(ERROR_FLAG==1)
     822:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <ERROR_FLAG>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	49 f5       	brne	.+82     	; 0x87c <__stack+0x1d>
	{
		static uint8 blink=0;
		strcpy((char*)dis.state,"Error");
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	ed e8       	ldi	r30, 0x8D	; 141
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ad ef       	ldi	r26, 0xFD	; 253
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	8a 95       	dec	r24
     83a:	e1 f7       	brne	.-8      	; 0x834 <BinkError+0x12>
		PinWrite(GPIOC,ERRORpIN,blink);
     83c:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__data_end>
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	83 e3       	ldi	r24, 0x33	; 51
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
		Control_Detergent_Hatch(OFF);
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 81 04 	call	0x902	; 0x902 <Control_Detergent_Hatch>
		Control_Door_Lock(OFF);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 88 04 	call	0x910	; 0x910 <Control_Door_Lock>
		Control_Motor(OFF,OFF);
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 8f 04 	call	0x91e	; 0x91e <Control_Motor>
		Control_Pump(OFF);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Control_Pump>
		Control_Water_Heater(OFF);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Control_Water_Heater>
		Control_Water_Valve(OFF);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 df 04 	call	0x9be	; 0x9be <Control_Water_Valve>
		blink^=1;
     870:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__data_end>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	89 27       	eor	r24, r25
     878:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
     87c:	08 95       	ret

0000087e <Read_Selector_Dial>:
LCD_CONFIG lcd1;
RTC_Info RTC1;

uint8 Read_Selector_Dial(void)
{
	switch (PinRead(GPIOA,PIN1))
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	89 e3       	ldi	r24, 0x39	; 57
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <PinRead>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	11 f0       	breq	.+4      	; 0x890 <Read_Selector_Dial+0x12>
	{
		case 1:
			return WOOL;
			break;
		case 0:
			return COTTON;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
uint8 Read_Selector_Dial(void)
{
	switch (PinRead(GPIOA,PIN1))
	{
		case 1:
			return WOOL;
     890:	81 e0       	ldi	r24, 0x01	; 1
		case 0:
			return COTTON;
			break;	
	}
	return 0;
}
     892:	08 95       	ret

00000894 <Read_Water_Level>:
uint8 Read_Water_Level(void)
{
     894:	cf 93       	push	r28
	uint8 low = PinRead(GPIOB,LOW_LVL);
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	86 e3       	ldi	r24, 0x36	; 54
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <PinRead>
     8a0:	c8 2f       	mov	r28, r24
	uint8 high = PinRead(GPIOB,HIGH_LVL);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	86 e3       	ldi	r24, 0x36	; 54
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <PinRead>
	if((high==1)&&(low==1))
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <Read_Water_Level+0x24>
     8b0:	c1 30       	cpi	r28, 0x01	; 1
     8b2:	41 f0       	breq	.+16     	; 0x8c4 <Read_Water_Level+0x30>
	}
	if ((high==0)&&(low==0))
	{
		return Water_Empety;
	}
	return 0;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0b c0       	rjmp	.+22     	; 0x8ce <Read_Water_Level+0x3a>
	uint8 high = PinRead(GPIOB,HIGH_LVL);
	if((high==1)&&(low==1))
	{
		return Water_Full;
	}
	if ((high==0)&&(low==0))
     8b8:	81 11       	cpse	r24, r1
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <Read_Water_Level+0x34>
     8bc:	c1 11       	cpse	r28, r1
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <Read_Water_Level+0x38>
	{
		return Water_Empety;
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <Read_Water_Level+0x3a>
{
	uint8 low = PinRead(GPIOB,LOW_LVL);
	uint8 high = PinRead(GPIOB,HIGH_LVL);
	if((high==1)&&(low==1))
	{
		return Water_Full;
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <Read_Water_Level+0x3a>
	}
	if ((high==0)&&(low==0))
	{
		return Water_Empety;
	}
	return 0;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <Read_Water_Level+0x3a>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
}
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <Read_Water_Temperature>:
uint8 Read_Water_Temperature(void)
{
	return (analog_Read(_PA0_)*500.0/1024);
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <analog_Read>
     8d8:	bc 01       	movw	r22, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	4a ef       	ldi	r20, 0xFA	; 250
     8e8:	53 e4       	ldi	r21, 0x43	; 67
     8ea:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e8       	ldi	r20, 0x80	; 128
     8f4:	5a e3       	ldi	r21, 0x3A	; 58
     8f6:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
     8fa:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
     8fe:	86 2f       	mov	r24, r22
}
     900:	08 95       	ret

00000902 <Control_Detergent_Hatch>:


void Control_Detergent_Hatch(uint8 State)
{
	PinWrite(GPIOB,PIN7,State);
     902:	48 2f       	mov	r20, r24
     904:	67 e0       	ldi	r22, 0x07	; 7
     906:	86 e3       	ldi	r24, 0x36	; 54
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
     90e:	08 95       	ret

00000910 <Control_Door_Lock>:
}
void Control_Door_Lock(uint8 State)
{
	PinWrite(GPIOB,DOOR,State);
     910:	48 2f       	mov	r20, r24
     912:	65 e0       	ldi	r22, 0x05	; 5
     914:	86 e3       	ldi	r24, 0x36	; 54
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
     91c:	08 95       	ret

0000091e <Control_Motor>:
}
void Control_Motor(uint8 Duty,uint8 Direction)
{
	switch(Direction)
     91e:	61 30       	cpi	r22, 0x01	; 1
     920:	21 f0       	breq	.+8      	; 0x92a <Control_Motor+0xc>
     922:	68 f1       	brcs	.+90     	; 0x97e <Control_Motor+0x60>
     924:	62 30       	cpi	r22, 0x02	; 2
     926:	b1 f0       	breq	.+44     	; 0x954 <Control_Motor+0x36>
     928:	08 95       	ret
	{
		case RIGHT:
			T0_PWM(Duty);
     92a:	68 2f       	mov	r22, r24
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
     936:	0e 94 b3 09 	call	0x1366	; 0x1366 <T0_PWM>
			PinWrite(GPIOC,M2,ON);
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	83 e3       	ldi	r24, 0x33	; 51
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
			PinWrite(GPIOC,M1,OFF);
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	83 e3       	ldi	r24, 0x33	; 51
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
			break;
     952:	08 95       	ret
		case LEFT:
			T0_PWM(Duty);
     954:	68 2f       	mov	r22, r24
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
     960:	0e 94 b3 09 	call	0x1366	; 0x1366 <T0_PWM>
			PinWrite(GPIOC,M1,ON);
     964:	41 e0       	ldi	r20, 0x01	; 1
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	83 e3       	ldi	r24, 0x33	; 51
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
			PinWrite(GPIOC,M2,OFF);
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	63 e0       	ldi	r22, 0x03	; 3
     974:	83 e3       	ldi	r24, 0x33	; 51
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
			break;
     97c:	08 95       	ret
		case OFF:
			T0_PWM(OFF);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	cb 01       	movw	r24, r22
     984:	0e 94 b3 09 	call	0x1366	; 0x1366 <T0_PWM>
			PinWrite(GPIOC,M1,OFF);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	83 e3       	ldi	r24, 0x33	; 51
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
			PinWrite(GPIOC,M2,OFF);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	63 e0       	ldi	r22, 0x03	; 3
     998:	83 e3       	ldi	r24, 0x33	; 51
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
     9a0:	08 95       	ret

000009a2 <Control_Pump>:
	}
		
	}
	void Control_Pump(uint8 State)
	{
		PinWrite(GPIOB,PUMP,State);
     9a2:	48 2f       	mov	r20, r24
     9a4:	64 e0       	ldi	r22, 0x04	; 4
     9a6:	86 e3       	ldi	r24, 0x36	; 54
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
     9ae:	08 95       	ret

000009b0 <Control_Water_Heater>:
	}
	void Control_Water_Heater(uint8 State)
	{
		PinWrite(GPIOB,HEATER,State);
     9b0:	48 2f       	mov	r20, r24
     9b2:	66 e0       	ldi	r22, 0x06	; 6
     9b4:	86 e3       	ldi	r24, 0x36	; 54
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
     9bc:	08 95       	ret

000009be <Control_Water_Valve>:
	}
	void Control_Water_Valve(uint8 State)
	{
		PinWrite(GPIOB,VAVLE,State);
     9be:	48 2f       	mov	r20, r24
     9c0:	62 e0       	ldi	r22, 0x02	; 2
     9c2:	86 e3       	ldi	r24, 0x36	; 54
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 c4 08 	call	0x1188	; 0x1188 <PinWrite>
     9ca:	08 95       	ret

000009cc <Display>:
	}
	
void Display(Display_info *info)
{
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
		
		static char shour[2],smin[2],ssec[2];
		static char shour1[2],smin1[2],ssec1[2];
		static char tmp[5];
			
			strcpy(lineThree,(const char*)"clk : ");
     9da:	0c ee       	ldi	r16, 0xEC	; 236
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	87 e0       	ldi	r24, 0x07	; 7
     9e0:	e3 e9       	ldi	r30, 0x93	; 147
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	d8 01       	movw	r26, r16
     9e6:	01 90       	ld	r0, Z+
     9e8:	0d 92       	st	X+, r0
     9ea:	8a 95       	dec	r24
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <Display+0x1a>
			strcpy(lineTwo,(const char*)"temp : ");
     9ee:	88 e0       	ldi	r24, 0x08	; 8
     9f0:	ea e9       	ldi	r30, 0x9A	; 154
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	ac ed       	ldi	r26, 0xDC	; 220
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	01 90       	ld	r0, Z+
     9fa:	0d 92       	st	X+, r0
     9fc:	8a 95       	dec	r24
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <Display+0x2c>
			strcpy(lineOne,(const char*)"State : ");
     a00:	89 e0       	ldi	r24, 0x09	; 9
     a02:	e2 ea       	ldi	r30, 0xA2	; 162
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	ac ec       	ldi	r26, 0xCC	; 204
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	01 90       	ld	r0, Z+
     a0c:	0d 92       	st	X+, r0
     a0e:	8a 95       	dec	r24
     a10:	e1 f7       	brne	.-8      	; 0xa0a <Display+0x3e>
			strcat(lineOne,(const char*)info->state);
     a12:	be 01       	movw	r22, r28
     a14:	8c ec       	ldi	r24, 0xCC	; 204
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineOne,"  ");
     a1c:	ec ec       	ldi	r30, 0xCC	; 204
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	01 90       	ld	r0, Z+
     a22:	00 20       	and	r0, r0
     a24:	e9 f7       	brne	.-6      	; 0xa20 <Display+0x54>
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	80 e2       	ldi	r24, 0x20	; 32
     a2a:	90 e2       	ldi	r25, 0x20	; 32
     a2c:	91 83       	std	Z+1, r25	; 0x01
     a2e:	80 83       	st	Z, r24
     a30:	12 82       	std	Z+2, r1	; 0x02
			itoa((info->RTC->Hour&0x0f),shour,10);
     a32:	ea 85       	ldd	r30, Y+10	; 0x0a
     a34:	fb 85       	ldd	r31, Y+11	; 0x0b
     a36:	82 81       	ldd	r24, Z+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	4a e0       	ldi	r20, 0x0A	; 10
     a3c:	6a ec       	ldi	r22, 0xCA	; 202
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
			itoa((info->RTC->Min&0x0f),smin,10);
     a46:	ea 85       	ldd	r30, Y+10	; 0x0a
     a48:	fb 85       	ldd	r31, Y+11	; 0x0b
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	8f 70       	andi	r24, 0x0F	; 15
     a4e:	4a e0       	ldi	r20, 0x0A	; 10
     a50:	68 ec       	ldi	r22, 0xC8	; 200
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
			itoa((info->RTC->Second&0x0f),ssec,10);
     a5a:	ea 85       	ldd	r30, Y+10	; 0x0a
     a5c:	fb 85       	ldd	r31, Y+11	; 0x0b
     a5e:	80 81       	ld	r24, Z
     a60:	8f 70       	andi	r24, 0x0F	; 15
     a62:	4a e0       	ldi	r20, 0x0A	; 10
     a64:	66 ec       	ldi	r22, 0xC6	; 198
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
			itoa((info->RTC->Hour>>4),shour1,10);
     a6e:	ea 85       	ldd	r30, Y+10	; 0x0a
     a70:	fb 85       	ldd	r31, Y+11	; 0x0b
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	82 95       	swap	r24
     a76:	8f 70       	andi	r24, 0x0F	; 15
     a78:	4a e0       	ldi	r20, 0x0A	; 10
     a7a:	64 ec       	ldi	r22, 0xC4	; 196
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
			itoa(info->RTC->Min>>4,smin1,10);
     a84:	ea 85       	ldd	r30, Y+10	; 0x0a
     a86:	fb 85       	ldd	r31, Y+11	; 0x0b
     a88:	81 81       	ldd	r24, Z+1	; 0x01
     a8a:	82 95       	swap	r24
     a8c:	8f 70       	andi	r24, 0x0F	; 15
     a8e:	4a e0       	ldi	r20, 0x0A	; 10
     a90:	62 ec       	ldi	r22, 0xC2	; 194
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
			itoa(info->RTC->Second>>4,ssec1,10);
     a9a:	ea 85       	ldd	r30, Y+10	; 0x0a
     a9c:	fb 85       	ldd	r31, Y+11	; 0x0b
     a9e:	80 81       	ld	r24, Z
     aa0:	82 95       	swap	r24
     aa2:	8f 70       	andi	r24, 0x0F	; 15
     aa4:	4a e0       	ldi	r20, 0x0A	; 10
     aa6:	60 ec       	ldi	r22, 0xC0	; 192
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
				
			itoa((info->funp)(),tmp,10);
     ab0:	e8 85       	ldd	r30, Y+8	; 0x08
     ab2:	f9 85       	ldd	r31, Y+9	; 0x09
     ab4:	09 95       	icall
     ab6:	4a e0       	ldi	r20, 0x0A	; 10
     ab8:	6b eb       	ldi	r22, 0xBB	; 187
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__itoa_ncheck>
			strcat(lineTwo,tmp);
     ac2:	6b eb       	ldi	r22, 0xBB	; 187
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	8c ed       	ldi	r24, 0xDC	; 220
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineTwo," ");
     ace:	ec ed       	ldi	r30, 0xDC	; 220
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	01 90       	ld	r0, Z+
     ad4:	00 20       	and	r0, r0
     ad6:	e9 f7       	brne	.-6      	; 0xad2 <Display+0x106>
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	80 e2       	ldi	r24, 0x20	; 32
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
				
				
			strcat(lineThree,shour1);
     ae2:	64 ec       	ldi	r22, 0xC4	; 196
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	c8 01       	movw	r24, r16
     ae8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineThree,shour);
     aec:	6a ec       	ldi	r22, 0xCA	; 202
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	c8 01       	movw	r24, r16
     af2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineThree,":");
     af6:	f8 01       	movw	r30, r16
     af8:	01 90       	ld	r0, Z+
     afa:	00 20       	and	r0, r0
     afc:	e9 f7       	brne	.-6      	; 0xaf8 <Display+0x12c>
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	0f 2e       	mov	r0, r31
     b02:	fa e3       	ldi	r31, 0x3A	; 58
     b04:	ef 2e       	mov	r14, r31
     b06:	f1 2c       	mov	r15, r1
     b08:	f0 2d       	mov	r31, r0
     b0a:	f1 82       	std	Z+1, r15	; 0x01
     b0c:	e0 82       	st	Z, r14
			strcat(lineThree,smin1);
     b0e:	62 ec       	ldi	r22, 0xC2	; 194
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	c8 01       	movw	r24, r16
     b14:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineThree,smin);
     b18:	68 ec       	ldi	r22, 0xC8	; 200
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	c8 01       	movw	r24, r16
     b1e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineThree,":");
     b22:	f8 01       	movw	r30, r16
     b24:	01 90       	ld	r0, Z+
     b26:	00 20       	and	r0, r0
     b28:	e9 f7       	brne	.-6      	; 0xb24 <Display+0x158>
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	f1 82       	std	Z+1, r15	; 0x01
     b2e:	e0 82       	st	Z, r14
			strcat(lineThree,ssec1);
     b30:	60 ec       	ldi	r22, 0xC0	; 192
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	c8 01       	movw	r24, r16
     b36:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>
			strcat(lineThree,ssec);
     b3a:	66 ec       	ldi	r22, 0xC6	; 198
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	c8 01       	movw	r24, r16
     b40:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcat>

			LCD_RowCol(info->lcd,0,5);
     b44:	45 e0       	ldi	r20, 0x05	; 5
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	8c 85       	ldd	r24, Y+12	; 0x0c
     b4a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b4c:	0e 94 fd 07 	call	0xffa	; 0xffa <LCD_RowCol>
			LCD_Send_String(info->lcd,(uint8*)"shaher");
     b50:	6b ea       	ldi	r22, 0xAB	; 171
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	8c 85       	ldd	r24, Y+12	; 0x0c
     b56:	9d 85       	ldd	r25, Y+13	; 0x0d
     b58:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <LCD_Send_String>
			LCD_RowCol(info->lcd,1,0);
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	8c 85       	ldd	r24, Y+12	; 0x0c
     b62:	9d 85       	ldd	r25, Y+13	; 0x0d
     b64:	0e 94 fd 07 	call	0xffa	; 0xffa <LCD_RowCol>
			LCD_Send_String(info->lcd,(uint8*)lineOne);
     b68:	6c ec       	ldi	r22, 0xCC	; 204
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b70:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <LCD_Send_String>
			LCD_RowCol(info->lcd,2,0);
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	62 e0       	ldi	r22, 0x02	; 2
     b78:	8c 85       	ldd	r24, Y+12	; 0x0c
     b7a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b7c:	0e 94 fd 07 	call	0xffa	; 0xffa <LCD_RowCol>
			LCD_Send_String(info->lcd,(uint8*)lineTwo);
     b80:	6c ed       	ldi	r22, 0xDC	; 220
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	8c 85       	ldd	r24, Y+12	; 0x0c
     b86:	9d 85       	ldd	r25, Y+13	; 0x0d
     b88:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <LCD_Send_String>
			LCD_RowCol(info->lcd,3,0);
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	8c 85       	ldd	r24, Y+12	; 0x0c
     b92:	9d 85       	ldd	r25, Y+13	; 0x0d
     b94:	0e 94 fd 07 	call	0xffa	; 0xffa <LCD_RowCol>
			LCD_Send_String(info->lcd,(uint8*)lineThree);
     b98:	b8 01       	movw	r22, r16
     b9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b9e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <LCD_Send_String>
			
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	08 95       	ret

00000bb0 <__vector_7>:

	extern uint8 sys_state;
	

ISR(TIMER1_COMPA_vect)
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	SchedulerUpdate();
     bd2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <SchedulerUpdate>
}
     bd6:	ff 91       	pop	r31
     bd8:	ef 91       	pop	r30
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_1>:

ISR(INT0_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	8f 93       	push	r24
	switch(sys_state)
     c04:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <sys_state>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	41 f0       	breq	.+16     	; 0xc1c <__vector_1+0x24>
     c0c:	18 f0       	brcs	.+6      	; 0xc14 <__vector_1+0x1c>
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	49 f0       	breq	.+18     	; 0xc24 <__vector_1+0x2c>
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <__vector_1+0x32>
	{
		case OFF:
		sys_state=start;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <sys_state>
		break;
     c1a:	07 c0       	rjmp	.+14     	; 0xc2a <__vector_1+0x32>
		case start:
		sys_state=pause;
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <sys_state>
		break;
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <__vector_1+0x32>
		case pause:
		sys_state=start;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <sys_state>
		break;
	}
}
     c2a:	8f 91       	pop	r24
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <main>:

int main(void)
{
	sys_init();
     c36:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <sys_init>
	SchedulerIntit();
     c3a:	0e 94 4e 0a 	call	0x149c	; 0x149c <SchedulerIntit>
	
	cresteTask(sys_update,0,100);
     c3e:	04 e6       	ldi	r16, 0x64	; 100
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	ba 01       	movw	r22, r20
     c4c:	8f e5       	ldi	r24, 0x5F	; 95
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <cresteTask>
	cresteTask(Display2,1,100);
     c54:	04 e6       	ldi	r16, 0x64	; 100
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	86 e0       	ldi	r24, 0x06	; 6
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <cresteTask>
	cresteTask(BinkError,0,1000);
     c6c:	08 ee       	ldi	r16, 0xE8	; 232
     c6e:	13 e0       	ldi	r17, 0x03	; 3
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	ba 01       	movw	r22, r20
     c7a:	81 e1       	ldi	r24, 0x11	; 17
     c7c:	94 e0       	ldi	r25, 0x04	; 4
     c7e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <cresteTask>
	cresteTask(save_state,0,1000);
     c82:	08 ee       	ldi	r16, 0xE8	; 232
     c84:	13 e0       	ldi	r17, 0x03	; 3
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	ba 01       	movw	r22, r20
     c90:	89 ed       	ldi	r24, 0xD9	; 217
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <cresteTask>
	
	SchedulerStart();
     c98:	0e 94 8d 0a 	call	0x151a	; 0x151a <SchedulerStart>
    while(1)
    {
        Dispatcher();
     c9c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <Dispatcher>
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <main+0x66>

00000ca2 <Send_Instruction>:
	Send_Instruction(ports,Display_Clear);
	
}

void Send_Instruction(LCD_CONFIG * ports,uint8 Instruction)
{
     ca2:	fc 01       	movw	r30, r24
	Clear_Bit(ports->LCD_Control->port,ports->RS);
     ca4:	a0 81       	ld	r26, Z
     ca6:	b1 81       	ldd	r27, Z+1	; 0x01
     ca8:	12 96       	adiw	r26, 0x02	; 2
     caa:	3c 91       	ld	r19, X
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	ac 01       	movw	r20, r24
     cb4:	02 80       	ldd	r0, Z+2	; 0x02
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <Send_Instruction+0x1a>
     cb8:	44 0f       	add	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <Send_Instruction+0x16>
     cc0:	24 2f       	mov	r18, r20
     cc2:	20 95       	com	r18
     cc4:	23 23       	and	r18, r19
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	2c 93       	st	X, r18
	Clear_Bit(ports->LCD_Control->port,ports->RW);
     cca:	a0 81       	ld	r26, Z
     ccc:	b1 81       	ldd	r27, Z+1	; 0x01
     cce:	12 96       	adiw	r26, 0x02	; 2
     cd0:	3c 91       	ld	r19, X
     cd2:	12 97       	sbiw	r26, 0x02	; 2
     cd4:	ac 01       	movw	r20, r24
     cd6:	03 80       	ldd	r0, Z+3	; 0x03
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <Send_Instruction+0x3c>
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <Send_Instruction+0x38>
     ce2:	24 2f       	mov	r18, r20
     ce4:	20 95       	com	r18
     ce6:	23 23       	and	r18, r19
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	2c 93       	st	X, r18
	
	Set_Bit(ports->LCD_Control->port,ports->E);
     cec:	a0 81       	ld	r26, Z
     cee:	b1 81       	ldd	r27, Z+1	; 0x01
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	4c 91       	ld	r20, X
     cf4:	12 97       	sbiw	r26, 0x02	; 2
     cf6:	9c 01       	movw	r18, r24
     cf8:	04 80       	ldd	r0, Z+4	; 0x04
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <Send_Instruction+0x5e>
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <Send_Instruction+0x5a>
     d04:	24 2b       	or	r18, r20
     d06:	12 96       	adiw	r26, 0x02	; 2
     d08:	2c 93       	st	X, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d0a:	a9 ef       	ldi	r26, 0xF9	; 249
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	11 97       	sbiw	r26, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <Send_Instruction+0x6c>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <Send_Instruction+0x72>
     d14:	00 00       	nop
	   _delay_ms(1);
	   Clear_Bit(ports->LCD_Control->port,ports->E);
	   _delay_ms(1);
	#else
	   #if Upper_Data_Port
	      ports->LCD_Data->port &=(0x0F); 
     d16:	a5 81       	ldd	r26, Z+5	; 0x05
     d18:	b6 81       	ldd	r27, Z+6	; 0x06
     d1a:	12 96       	adiw	r26, 0x02	; 2
     d1c:	2c 91       	ld	r18, X
     d1e:	12 97       	sbiw	r26, 0x02	; 2
     d20:	2f 70       	andi	r18, 0x0F	; 15
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	2c 93       	st	X, r18
		  ports->LCD_Data->port|=(Instruction &(0xF0));
     d26:	a5 81       	ldd	r26, Z+5	; 0x05
     d28:	b6 81       	ldd	r27, Z+6	; 0x06
     d2a:	12 96       	adiw	r26, 0x02	; 2
     d2c:	2c 91       	ld	r18, X
     d2e:	12 97       	sbiw	r26, 0x02	; 2
     d30:	36 2f       	mov	r19, r22
     d32:	30 7f       	andi	r19, 0xF0	; 240
     d34:	23 2b       	or	r18, r19
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	2c 93       	st	X, r18
     d3a:	a9 ef       	ldi	r26, 0xF9	; 249
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <Send_Instruction+0x9c>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <Send_Instruction+0xa2>
     d44:	00 00       	nop
		  _delay_ms(1);
		  
		  Clear_Bit(ports->LCD_Control->port,ports->E);
     d46:	a0 81       	ld	r26, Z
     d48:	b1 81       	ldd	r27, Z+1	; 0x01
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	3c 91       	ld	r19, X
     d4e:	12 97       	sbiw	r26, 0x02	; 2
     d50:	ac 01       	movw	r20, r24
     d52:	04 80       	ldd	r0, Z+4	; 0x04
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <Send_Instruction+0xb8>
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <Send_Instruction+0xb4>
     d5e:	24 2f       	mov	r18, r20
     d60:	20 95       	com	r18
     d62:	23 23       	and	r18, r19
     d64:	12 96       	adiw	r26, 0x02	; 2
     d66:	2c 93       	st	X, r18
     d68:	a9 ef       	ldi	r26, 0xF9	; 249
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <Send_Instruction+0xca>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <Send_Instruction+0xd0>
     d72:	00 00       	nop
		  _delay_ms(1);
		  
		  Set_Bit(ports->LCD_Control->port,ports->E);
     d74:	a0 81       	ld	r26, Z
     d76:	b1 81       	ldd	r27, Z+1	; 0x01
     d78:	12 96       	adiw	r26, 0x02	; 2
     d7a:	4c 91       	ld	r20, X
     d7c:	12 97       	sbiw	r26, 0x02	; 2
     d7e:	9c 01       	movw	r18, r24
     d80:	04 80       	ldd	r0, Z+4	; 0x04
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <Send_Instruction+0xe6>
     d84:	22 0f       	add	r18, r18
     d86:	33 1f       	adc	r19, r19
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <Send_Instruction+0xe2>
     d8c:	24 2b       	or	r18, r20
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	2c 93       	st	X, r18
     d92:	a9 ef       	ldi	r26, 0xF9	; 249
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	11 97       	sbiw	r26, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <Send_Instruction+0xf4>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <Send_Instruction+0xfa>
     d9c:	00 00       	nop
		  _delay_ms(1);
		  
		  ports->LCD_Data->port &= (0x0F);
     d9e:	a5 81       	ldd	r26, Z+5	; 0x05
     da0:	b6 81       	ldd	r27, Z+6	; 0x06
     da2:	12 96       	adiw	r26, 0x02	; 2
     da4:	2c 91       	ld	r18, X
     da6:	12 97       	sbiw	r26, 0x02	; 2
     da8:	2f 70       	andi	r18, 0x0F	; 15
     daa:	12 96       	adiw	r26, 0x02	; 2
     dac:	2c 93       	st	X, r18
		  ports->LCD_Data->port|=((Instruction )<<4);
     dae:	a5 81       	ldd	r26, Z+5	; 0x05
     db0:	b6 81       	ldd	r27, Z+6	; 0x06
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	2c 91       	ld	r18, X
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	30 e1       	ldi	r19, 0x10	; 16
     dba:	63 9f       	mul	r22, r19
     dbc:	b0 01       	movw	r22, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	62 2b       	or	r22, r18
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	6c 93       	st	X, r22
     dc6:	a9 ef       	ldi	r26, 0xF9	; 249
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	11 97       	sbiw	r26, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <Send_Instruction+0x128>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <Send_Instruction+0x12e>
     dd0:	00 00       	nop
		  _delay_ms(1);
		  
		  Clear_Bit(ports->LCD_Control->port,ports->E);
     dd2:	a0 81       	ld	r26, Z
     dd4:	b1 81       	ldd	r27, Z+1	; 0x01
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	2c 91       	ld	r18, X
     dda:	12 97       	sbiw	r26, 0x02	; 2
     ddc:	04 80       	ldd	r0, Z+4	; 0x04
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <Send_Instruction+0x142>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <Send_Instruction+0x13e>
     de8:	80 95       	com	r24
     dea:	82 23       	and	r24, r18
     dec:	12 96       	adiw	r26, 0x02	; 2
     dee:	8c 93       	st	X, r24
     df0:	89 ef       	ldi	r24, 0xF9	; 249
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <Send_Instruction+0x152>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <Send_Instruction+0x158>
     dfa:	00 00       	nop
     dfc:	08 95       	ret

00000dfe <LCD_INIT>:
 */ 

#include "LCD.h"

void LCD_INIT(LCD_CONFIG * ports)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
	ports->LCD_Control->ddr |=(1<<ports->RW) |(1<<ports->RS) |(1<<ports->E);
     e04:	e8 81       	ld	r30, Y
     e06:	f9 81       	ldd	r31, Y+1	; 0x01
     e08:	31 81       	ldd	r19, Z+1	; 0x01
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	bc 01       	movw	r22, r24
     e10:	0b 80       	ldd	r0, Y+3	; 0x03
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <LCD_INIT+0x1a>
     e14:	66 0f       	add	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <LCD_INIT+0x16>
     e1c:	ac 01       	movw	r20, r24
     e1e:	0a 80       	ldd	r0, Y+2	; 0x02
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <LCD_INIT+0x28>
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <LCD_INIT+0x24>
     e2a:	26 2f       	mov	r18, r22
     e2c:	24 2b       	or	r18, r20
     e2e:	23 2b       	or	r18, r19
     e30:	0c 80       	ldd	r0, Y+4	; 0x04
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <LCD_INIT+0x3a>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <LCD_INIT+0x36>
     e3c:	82 2b       	or	r24, r18
     e3e:	81 83       	std	Z+1, r24	; 0x01
	   ports->LCD_Data->ddr =0xFF;
	   
	#else
	   #if Upper_Data_Port
	   
	   ports->LCD_Data->ddr  |=(0xF0);
     e40:	ed 81       	ldd	r30, Y+5	; 0x05
     e42:	fe 81       	ldd	r31, Y+6	; 0x06
     e44:	81 81       	ldd	r24, Z+1	; 0x01
     e46:	80 6f       	ori	r24, 0xF0	; 240
     e48:	81 83       	std	Z+1, r24	; 0x01
	   ports->LCD_Data->ddr  |=(0x0F);

       #endif
	  
	#endif
	Send_Instruction(ports,Return_Home); /*what the heal is that?*/
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	ce 01       	movw	r24, r28
     e4e:	0e 94 51 06 	call	0xca2	; 0xca2 <Send_Instruction>
	Send_Instruction(ports,Function_Set);
     e52:	68 e2       	ldi	r22, 0x28	; 40
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 51 06 	call	0xca2	; 0xca2 <Send_Instruction>
	Send_Instruction(ports,Display_ON);
     e5a:	6c e0       	ldi	r22, 0x0C	; 12
     e5c:	ce 01       	movw	r24, r28
     e5e:	0e 94 51 06 	call	0xca2	; 0xca2 <Send_Instruction>
	Send_Instruction(ports,Display_Clear);
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	ce 01       	movw	r24, r28
     e66:	0e 94 51 06 	call	0xca2	; 0xca2 <Send_Instruction>
	
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <LCD_Send_Char>:

    #endif
}

void LCD_Send_Char(LCD_CONFIG * ports,uint8 Data)
{
     e70:	fc 01       	movw	r30, r24
	Set_Bit(ports->LCD_Control->port,ports->RS);
     e72:	a0 81       	ld	r26, Z
     e74:	b1 81       	ldd	r27, Z+1	; 0x01
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	4c 91       	ld	r20, X
     e7a:	12 97       	sbiw	r26, 0x02	; 2
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9c 01       	movw	r18, r24
     e82:	02 80       	ldd	r0, Z+2	; 0x02
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <LCD_Send_Char+0x1a>
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <LCD_Send_Char+0x16>
     e8e:	24 2b       	or	r18, r20
     e90:	12 96       	adiw	r26, 0x02	; 2
     e92:	2c 93       	st	X, r18
	Clear_Bit(ports->LCD_Control->port,ports->RW);
     e94:	a0 81       	ld	r26, Z
     e96:	b1 81       	ldd	r27, Z+1	; 0x01
     e98:	12 96       	adiw	r26, 0x02	; 2
     e9a:	3c 91       	ld	r19, X
     e9c:	12 97       	sbiw	r26, 0x02	; 2
     e9e:	ac 01       	movw	r20, r24
     ea0:	03 80       	ldd	r0, Z+3	; 0x03
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <LCD_Send_Char+0x38>
     ea4:	44 0f       	add	r20, r20
     ea6:	55 1f       	adc	r21, r21
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <LCD_Send_Char+0x34>
     eac:	24 2f       	mov	r18, r20
     eae:	20 95       	com	r18
     eb0:	23 23       	and	r18, r19
     eb2:	12 96       	adiw	r26, 0x02	; 2
     eb4:	2c 93       	st	X, r18
	
	Set_Bit(ports->LCD_Control->port,ports->E);
     eb6:	a0 81       	ld	r26, Z
     eb8:	b1 81       	ldd	r27, Z+1	; 0x01
     eba:	12 96       	adiw	r26, 0x02	; 2
     ebc:	4c 91       	ld	r20, X
     ebe:	12 97       	sbiw	r26, 0x02	; 2
     ec0:	9c 01       	movw	r18, r24
     ec2:	04 80       	ldd	r0, Z+4	; 0x04
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <LCD_Send_Char+0x5a>
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <LCD_Send_Char+0x56>
     ece:	24 2b       	or	r18, r20
     ed0:	12 96       	adiw	r26, 0x02	; 2
     ed2:	2c 93       	st	X, r18
     ed4:	a9 ef       	ldi	r26, 0xF9	; 249
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	11 97       	sbiw	r26, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <LCD_Send_Char+0x68>
     edc:	00 c0       	rjmp	.+0      	; 0xede <LCD_Send_Char+0x6e>
     ede:	00 00       	nop
	      _delay_ms(1);
	      Clear_Bit(ports->LCD_Control->port,ports->E);
	      _delay_ms(1);
	 #else
	    #if Upper_Data_Port
	    ports->LCD_Data->port &= (0x0F) ;
     ee0:	a5 81       	ldd	r26, Z+5	; 0x05
     ee2:	b6 81       	ldd	r27, Z+6	; 0x06
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	2c 91       	ld	r18, X
     ee8:	12 97       	sbiw	r26, 0x02	; 2
     eea:	2f 70       	andi	r18, 0x0F	; 15
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	2c 93       	st	X, r18
		ports->LCD_Data->port|=(Data &(0xF0));
     ef0:	a5 81       	ldd	r26, Z+5	; 0x05
     ef2:	b6 81       	ldd	r27, Z+6	; 0x06
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	2c 91       	ld	r18, X
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	36 2f       	mov	r19, r22
     efc:	30 7f       	andi	r19, 0xF0	; 240
     efe:	23 2b       	or	r18, r19
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	2c 93       	st	X, r18
     f04:	a9 ef       	ldi	r26, 0xF9	; 249
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	11 97       	sbiw	r26, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <LCD_Send_Char+0x98>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <LCD_Send_Char+0x9e>
     f0e:	00 00       	nop
	    _delay_ms(1);
	
	    Clear_Bit(ports->LCD_Control->port,ports->E);
     f10:	a0 81       	ld	r26, Z
     f12:	b1 81       	ldd	r27, Z+1	; 0x01
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	3c 91       	ld	r19, X
     f18:	12 97       	sbiw	r26, 0x02	; 2
     f1a:	ac 01       	movw	r20, r24
     f1c:	04 80       	ldd	r0, Z+4	; 0x04
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <LCD_Send_Char+0xb4>
     f20:	44 0f       	add	r20, r20
     f22:	55 1f       	adc	r21, r21
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <LCD_Send_Char+0xb0>
     f28:	24 2f       	mov	r18, r20
     f2a:	20 95       	com	r18
     f2c:	23 23       	and	r18, r19
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	2c 93       	st	X, r18
     f32:	a9 ef       	ldi	r26, 0xF9	; 249
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <LCD_Send_Char+0xc6>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <LCD_Send_Char+0xcc>
     f3c:	00 00       	nop
	    _delay_ms(1);
	
	    Set_Bit(ports->LCD_Control->port,ports->E);
     f3e:	a0 81       	ld	r26, Z
     f40:	b1 81       	ldd	r27, Z+1	; 0x01
     f42:	12 96       	adiw	r26, 0x02	; 2
     f44:	4c 91       	ld	r20, X
     f46:	12 97       	sbiw	r26, 0x02	; 2
     f48:	9c 01       	movw	r18, r24
     f4a:	04 80       	ldd	r0, Z+4	; 0x04
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <LCD_Send_Char+0xe2>
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <LCD_Send_Char+0xde>
     f56:	24 2b       	or	r18, r20
     f58:	12 96       	adiw	r26, 0x02	; 2
     f5a:	2c 93       	st	X, r18
     f5c:	a9 ef       	ldi	r26, 0xF9	; 249
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	11 97       	sbiw	r26, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <LCD_Send_Char+0xf0>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <LCD_Send_Char+0xf6>
     f66:	00 00       	nop
	    _delay_ms(1);
	
	    ports->LCD_Data->port &=(0x0F);
     f68:	a5 81       	ldd	r26, Z+5	; 0x05
     f6a:	b6 81       	ldd	r27, Z+6	; 0x06
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	2c 91       	ld	r18, X
     f70:	12 97       	sbiw	r26, 0x02	; 2
     f72:	2f 70       	andi	r18, 0x0F	; 15
     f74:	12 96       	adiw	r26, 0x02	; 2
     f76:	2c 93       	st	X, r18
		ports->LCD_Data->port|=((Data )<<4);
     f78:	a5 81       	ldd	r26, Z+5	; 0x05
     f7a:	b6 81       	ldd	r27, Z+6	; 0x06
     f7c:	12 96       	adiw	r26, 0x02	; 2
     f7e:	2c 91       	ld	r18, X
     f80:	12 97       	sbiw	r26, 0x02	; 2
     f82:	30 e1       	ldi	r19, 0x10	; 16
     f84:	63 9f       	mul	r22, r19
     f86:	b0 01       	movw	r22, r0
     f88:	11 24       	eor	r1, r1
     f8a:	62 2b       	or	r22, r18
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	6c 93       	st	X, r22
     f90:	a9 ef       	ldi	r26, 0xF9	; 249
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <LCD_Send_Char+0x124>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <LCD_Send_Char+0x12a>
     f9a:	00 00       	nop
	    _delay_ms(1);
	
	    Clear_Bit(ports->LCD_Control->port,ports->E);
     f9c:	a0 81       	ld	r26, Z
     f9e:	b1 81       	ldd	r27, Z+1	; 0x01
     fa0:	12 96       	adiw	r26, 0x02	; 2
     fa2:	2c 91       	ld	r18, X
     fa4:	12 97       	sbiw	r26, 0x02	; 2
     fa6:	04 80       	ldd	r0, Z+4	; 0x04
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <LCD_Send_Char+0x13e>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <LCD_Send_Char+0x13a>
     fb2:	80 95       	com	r24
     fb4:	82 23       	and	r24, r18
     fb6:	12 96       	adiw	r26, 0x02	; 2
     fb8:	8c 93       	st	X, r24
     fba:	89 ef       	ldi	r24, 0xF9	; 249
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <LCD_Send_Char+0x14e>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <LCD_Send_Char+0x154>
     fc4:	00 00       	nop
     fc6:	08 95       	ret

00000fc8 <LCD_Send_String>:

    #endif
}

void LCD_Send_String(LCD_CONFIG * ports,uint8 * ptr)
{
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	eb 01       	movw	r28, r22
	while (* ptr !='\0')
     fd2:	68 81       	ld	r22, Y
     fd4:	66 23       	and	r22, r22
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <LCD_Send_String+0x20>
     fd8:	8c 01       	movw	r16, r24
     fda:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Send_Char(ports,*ptr);
     fdc:	c8 01       	movw	r24, r16
     fde:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Send_Char>
    #endif
}

void LCD_Send_String(LCD_CONFIG * ports,uint8 * ptr)
{
	while (* ptr !='\0')
     fe2:	69 91       	ld	r22, Y+
     fe4:	61 11       	cpse	r22, r1
     fe6:	fa cf       	rjmp	.-12     	; 0xfdc <LCD_Send_String+0x14>
	{
		LCD_Send_Char(ports,*ptr);
		ptr++;
	}
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <LCD_Clear>:

void LCD_Clear(LCD_CONFIG * ports)
{
	Send_Instruction(ports,Display_Clear);
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	0e 94 51 06 	call	0xca2	; 0xca2 <Send_Instruction>
     ff8:	08 95       	ret

00000ffa <LCD_RowCol>:

void LCD_RowCol(LCD_CONFIG * ports,uint8 Row ,uint8 Col)
{
	uint8 Address=0;
	
	switch (Row)
     ffa:	61 30       	cpi	r22, 0x01	; 1
     ffc:	31 f0       	breq	.+12     	; 0x100a <LCD_RowCol+0x10>
     ffe:	50 f0       	brcs	.+20     	; 0x1014 <LCD_RowCol+0x1a>
    1000:	62 30       	cpi	r22, 0x02	; 2
    1002:	29 f0       	breq	.+10     	; 0x100e <LCD_RowCol+0x14>
    1004:	63 30       	cpi	r22, 0x03	; 3
    1006:	29 f0       	breq	.+10     	; 0x1012 <LCD_RowCol+0x18>
    1008:	08 95       	ret
	{
		case 0:
		   Address=Col+LCD_1ST_Base;
		   break;
		case 1:
		   Address=Col+LCD_2ND_Base;
    100a:	40 5c       	subi	r20, 0xC0	; 192
		   break;
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <LCD_RowCol+0x1a>
		case 2:
		   Address=Col+LCD_3RD_Base;
    100e:	40 5f       	subi	r20, 0xF0	; 240
		   break;
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <LCD_RowCol+0x1a>
		case 3:
		   Address=Col+LCD_4TH_Base;
    1012:	40 5b       	subi	r20, 0xB0	; 176
		   break;
		default:
		   return;         
	}
	Send_Instruction(ports,DDRAM|Address);
    1014:	64 2f       	mov	r22, r20
    1016:	60 68       	ori	r22, 0x80	; 128
    1018:	0e 94 51 06 	call	0xca2	; 0xca2 <Send_Instruction>
    101c:	08 95       	ret

0000101e <RTC_Init>:
    101e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <I2C_Start>
    1022:	80 ed       	ldi	r24, 0xD0	; 208
    1024:	0e 94 99 09 	call	0x1332	; 0x1332 <I2C_Write_byte>
    1028:	87 e0       	ldi	r24, 0x07	; 7
    102a:	0e 94 99 09 	call	0x1332	; 0x1332 <I2C_Write_byte>
    102e:	80 e1       	ldi	r24, 0x10	; 16
    1030:	0e 94 99 09 	call	0x1332	; 0x1332 <I2C_Write_byte>
    1034:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <I2C_Stop>
    1038:	08 95       	ret

0000103a <RTC_Read>:
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	0e 94 72 09 	call	0x12e4	; 0x12e4 <I2C_Start>
    1044:	80 ed       	ldi	r24, 0xD0	; 208
    1046:	0e 94 99 09 	call	0x1332	; 0x1332 <I2C_Write_byte>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0e 94 99 09 	call	0x1332	; 0x1332 <I2C_Write_byte>
    1050:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <I2C_Stop>
    1054:	0e 94 72 09 	call	0x12e4	; 0x12e4 <I2C_Start>
    1058:	81 ed       	ldi	r24, 0xD1	; 209
    105a:	0e 94 99 09 	call	0x1332	; 0x1332 <I2C_Write_byte>
    105e:	0e 94 83 09 	call	0x1306	; 0x1306 <I2C_Read_Ack>
    1062:	88 83       	st	Y, r24
    1064:	0e 94 83 09 	call	0x1306	; 0x1306 <I2C_Read_Ack>
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	0e 94 83 09 	call	0x1306	; 0x1306 <I2C_Read_Ack>
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	0e 94 83 09 	call	0x1306	; 0x1306 <I2C_Read_Ack>
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	0e 94 83 09 	call	0x1306	; 0x1306 <I2C_Read_Ack>
    107a:	8c 83       	std	Y+4, r24	; 0x04
    107c:	0e 94 83 09 	call	0x1306	; 0x1306 <I2C_Read_Ack>
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_Read_NAck>
    1086:	8e 83       	std	Y+6, r24	; 0x06
    1088:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <I2C_Stop>
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <ADC_Init>:
    1092:	67 b9       	out	0x07, r22	; 7
    1094:	44 0f       	add	r20, r20
    1096:	44 0f       	add	r20, r20
    1098:	44 0f       	add	r20, r20
    109a:	24 2b       	or	r18, r20
    109c:	26 b9       	out	0x06, r18	; 6
    109e:	81 11       	cpse	r24, r1
    10a0:	35 9a       	sbi	0x06, 5	; 6
    10a2:	37 9a       	sbi	0x06, 7	; 6
    10a4:	08 95       	ret

000010a6 <analog_Read>:
    10a6:	97 b1       	in	r25, 0x07	; 7
    10a8:	90 7e       	andi	r25, 0xE0	; 224
    10aa:	97 b9       	out	0x07, r25	; 7
    10ac:	97 b1       	in	r25, 0x07	; 7
    10ae:	89 2b       	or	r24, r25
    10b0:	87 b9       	out	0x07, r24	; 7
    10b2:	36 9a       	sbi	0x06, 6	; 6
    10b4:	34 9b       	sbis	0x06, 4	; 6
    10b6:	fe cf       	rjmp	.-4      	; 0x10b4 <analog_Read+0xe>
    10b8:	84 b1       	in	r24, 0x04	; 4
    10ba:	95 b1       	in	r25, 0x05	; 5
    10bc:	34 9a       	sbi	0x06, 4	; 6
    10be:	93 70       	andi	r25, 0x03	; 3
    10c0:	08 95       	ret

000010c2 <EEPROM_Write>:
	EECR |=INT;
}

void EEPROM_Write(uint16 address,uint8 Data)
{
	while(EECR &(1<<EEWE));  /*wait until prev complete.*/
    10c2:	e1 99       	sbic	0x1c, 1	; 28
    10c4:	fe cf       	rjmp	.-4      	; 0x10c2 <EEPROM_Write>
	EEAR = address;			//write address of byte.
    10c6:	9f bb       	out	0x1f, r25	; 31
    10c8:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;            //write Data.
    10ca:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);     //halt before writing.
    10cc:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE);      //enable writing. 	
    10ce:	e1 9a       	sbi	0x1c, 1	; 28
    10d0:	08 95       	ret

000010d2 <EEPROM_Read>:
}
uint8 EEPROM_Read(uint16 address)
{
	while(EECR &(1<<EEWE));  /*wait until prev complete.*/
    10d2:	e1 99       	sbic	0x1c, 1	; 28
    10d4:	fe cf       	rjmp	.-4      	; 0x10d2 <EEPROM_Read>
	EEAR = address;			//write address of byte.
    10d6:	9f bb       	out	0x1f, r25	; 31
    10d8:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);      //ENAble reading.
    10da:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;            //write Data.
    10dc:	8d b3       	in	r24, 0x1d	; 29
}
    10de:	08 95       	ret

000010e0 <EX_INT_Enable>:
    10e0:	9f b7       	in	r25, 0x3f	; 63
    10e2:	9f 77       	andi	r25, 0x7F	; 127
    10e4:	9f bf       	out	0x3f, r25	; 63
    10e6:	80 34       	cpi	r24, 0x40	; 64
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <EX_INT_Enable+0x14>
    10ea:	80 38       	cpi	r24, 0x80	; 128
    10ec:	89 f0       	breq	.+34     	; 0x1110 <EX_INT_Enable+0x30>
    10ee:	80 32       	cpi	r24, 0x20	; 32
    10f0:	c1 f4       	brne	.+48     	; 0x1122 <EX_INT_Enable+0x42>
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <EX_INT_Enable+0x22>
    10f4:	85 b7       	in	r24, 0x35	; 53
    10f6:	68 2b       	or	r22, r24
    10f8:	65 bf       	out	0x35, r22	; 53
    10fa:	8b b7       	in	r24, 0x3b	; 59
    10fc:	80 64       	ori	r24, 0x40	; 64
    10fe:	8b bf       	out	0x3b, r24	; 59
    1100:	0d c0       	rjmp	.+26     	; 0x111c <EX_INT_Enable+0x3c>
    1102:	85 b7       	in	r24, 0x35	; 53
    1104:	68 2b       	or	r22, r24
    1106:	65 bf       	out	0x35, r22	; 53
    1108:	8b b7       	in	r24, 0x3b	; 59
    110a:	80 62       	ori	r24, 0x20	; 32
    110c:	8b bf       	out	0x3b, r24	; 59
    110e:	06 c0       	rjmp	.+12     	; 0x111c <EX_INT_Enable+0x3c>
    1110:	84 b7       	in	r24, 0x34	; 52
    1112:	68 2b       	or	r22, r24
    1114:	64 bf       	out	0x34, r22	; 52
    1116:	8b b7       	in	r24, 0x3b	; 59
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	8b bf       	out	0x3b, r24	; 59
    111c:	8f b7       	in	r24, 0x3f	; 63
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	8f bf       	out	0x3f, r24	; 63
    1122:	08 95       	ret

00001124 <PinDirection>:

#include "GPIO.h"


void PinDirection( GPIO * G , PIN_Mode Mode , uint8 PINS )
{
    1124:	fc 01       	movw	r30, r24
	switch(Mode)
    1126:	61 30       	cpi	r22, 0x01	; 1
    1128:	79 f0       	breq	.+30     	; 0x1148 <PinDirection+0x24>
    112a:	18 f0       	brcs	.+6      	; 0x1132 <PinDirection+0xe>
    112c:	62 30       	cpi	r22, 0x02	; 2
    112e:	e1 f0       	breq	.+56     	; 0x1168 <PinDirection+0x44>
    1130:	08 95       	ret
	{
		case OUTPUT:
		     Set_Bit (G->ddr,PINS);
    1132:	21 81       	ldd	r18, Z+1	; 0x01
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <PinDirection+0x1a>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	4a 95       	dec	r20
    1140:	e2 f7       	brpl	.-8      	; 0x113a <PinDirection+0x16>
    1142:	82 2b       	or	r24, r18
    1144:	81 83       	std	Z+1, r24	; 0x01
			 break;
    1146:	08 95       	ret
		case INPUTFLOAT:
		     Clear_Bit(G->ddr,PINS);
    1148:	21 81       	ldd	r18, Z+1	; 0x01
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <PinDirection+0x30>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	4a 95       	dec	r20
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <PinDirection+0x2c>
    1158:	80 95       	com	r24
    115a:	92 2f       	mov	r25, r18
    115c:	98 23       	and	r25, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
			 Clear_Bit(G->port,PINS);
    1160:	92 81       	ldd	r25, Z+2	; 0x02
    1162:	89 23       	and	r24, r25
    1164:	82 83       	std	Z+2, r24	; 0x02
			 break;	 
    1166:	08 95       	ret
		case INPUTPULLUP:
		     Clear_Bit(G->ddr,PINS);
    1168:	21 81       	ldd	r18, Z+1	; 0x01
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <PinDirection+0x50>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	4a 95       	dec	r20
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <PinDirection+0x4c>
    1178:	98 2f       	mov	r25, r24
    117a:	90 95       	com	r25
    117c:	92 23       	and	r25, r18
    117e:	91 83       	std	Z+1, r25	; 0x01
			 Set_Bit(G->port,PINS);
    1180:	92 81       	ldd	r25, Z+2	; 0x02
    1182:	89 2b       	or	r24, r25
    1184:	82 83       	std	Z+2, r24	; 0x02
    1186:	08 95       	ret

00001188 <PinWrite>:
	}
	
}
void PinWrite( GPIO * G , uint8 PINS ,  PIN_State State)
{
	switch (State)
    1188:	44 23       	and	r20, r20
    118a:	19 f0       	breq	.+6      	; 0x1192 <PinWrite+0xa>
    118c:	41 30       	cpi	r20, 0x01	; 1
    118e:	71 f0       	breq	.+28     	; 0x11ac <PinWrite+0x24>
    1190:	08 95       	ret
	{
		case LOW:
		     Clear_Bit(G->port,PINS);
    1192:	fc 01       	movw	r30, r24
    1194:	42 81       	ldd	r20, Z+2	; 0x02
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <PinWrite+0x18>
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	6a 95       	dec	r22
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <PinWrite+0x14>
    11a4:	20 95       	com	r18
    11a6:	24 23       	and	r18, r20
    11a8:	22 83       	std	Z+2, r18	; 0x02
		     break;
    11aa:	08 95       	ret
		case HIGH:
		     Set_Bit(G->port,PINS);
    11ac:	fc 01       	movw	r30, r24
    11ae:	42 81       	ldd	r20, Z+2	; 0x02
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <PinWrite+0x32>
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	6a 95       	dec	r22
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <PinWrite+0x2e>
    11be:	24 2b       	or	r18, r20
    11c0:	22 83       	std	Z+2, r18	; 0x02
    11c2:	08 95       	ret

000011c4 <PinRead>:
			 break;
	}
}
PIN_State PinRead( GPIO * G , uint8 PINS)
{
	return ((G->pin & (1<<PINS)) !=0x00);
    11c4:	fc 01       	movw	r30, r24
    11c6:	80 81       	ld	r24, Z
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <PinRead+0xc>
    11cc:	95 95       	asr	r25
    11ce:	87 95       	ror	r24
    11d0:	6a 95       	dec	r22
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <PinRead+0x8>
}
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	08 95       	ret

000011d8 <I2C_Init>:
    11d8:	0f 93       	push	r16
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	d8 2f       	mov	r29, r24
    11e0:	c2 2f       	mov	r28, r18
    11e2:	01 30       	cpi	r16, 0x01	; 1
    11e4:	09 f1       	breq	.+66     	; 0x1228 <I2C_Init+0x50>
    11e6:	30 f0       	brcs	.+12     	; 0x11f4 <I2C_Init+0x1c>
    11e8:	02 30       	cpi	r16, 0x02	; 2
    11ea:	d1 f1       	breq	.+116    	; 0x1260 <I2C_Init+0x88>
    11ec:	03 30       	cpi	r16, 0x03	; 3
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <I2C_Init+0x1a>
    11f0:	53 c0       	rjmp	.+166    	; 0x1298 <I2C_Init+0xc0>
    11f2:	74 c0       	rjmp	.+232    	; 0x12dc <I2C_Init+0x104>
    11f4:	cb 01       	movw	r24, r22
    11f6:	ba 01       	movw	r22, r20
    11f8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
    11fc:	9b 01       	movw	r18, r22
    11fe:	ac 01       	movw	r20, r24
    1200:	0e 94 92 0a 	call	0x1524	; 0x1524 <__addsf3>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	74 e2       	ldi	r23, 0x24	; 36
    120c:	84 e7       	ldi	r24, 0x74	; 116
    120e:	99 e4       	ldi	r25, 0x49	; 73
    1210:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 91 0a 	call	0x1522	; 0x1522 <__subsf3>
    1220:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    1224:	60 b9       	out	0x00, r22	; 0
    1226:	53 c0       	rjmp	.+166    	; 0x12ce <I2C_Init+0xf6>
    1228:	cb 01       	movw	r24, r22
    122a:	ba 01       	movw	r22, r20
    122c:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	74 e2       	ldi	r23, 0x24	; 36
    1244:	84 e7       	ldi	r24, 0x74	; 116
    1246:	99 e4       	ldi	r25, 0x49	; 73
    1248:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	50 e4       	ldi	r21, 0x40	; 64
    1254:	0e 94 91 0a 	call	0x1522	; 0x1522 <__subsf3>
    1258:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    125c:	60 b9       	out	0x00, r22	; 0
    125e:	37 c0       	rjmp	.+110    	; 0x12ce <I2C_Init+0xf6>
    1260:	cb 01       	movw	r24, r22
    1262:	ba 01       	movw	r22, r20
    1264:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	52 e4       	ldi	r21, 0x42	; 66
    1270:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	74 e2       	ldi	r23, 0x24	; 36
    127c:	84 e7       	ldi	r24, 0x74	; 116
    127e:	99 e4       	ldi	r25, 0x49	; 73
    1280:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	5f e3       	ldi	r21, 0x3F	; 63
    128c:	0e 94 91 0a 	call	0x1522	; 0x1522 <__subsf3>
    1290:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    1294:	60 b9       	out	0x00, r22	; 0
    1296:	1b c0       	rjmp	.+54     	; 0x12ce <I2C_Init+0xf6>
    1298:	cb 01       	movw	r24, r22
    129a:	ba 01       	movw	r22, r20
    129c:	0e 94 9f 0b 	call	0x173e	; 0x173e <__floatunsisf>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	53 e4       	ldi	r21, 0x43	; 67
    12a8:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	74 e2       	ldi	r23, 0x24	; 36
    12b4:	84 e7       	ldi	r24, 0x74	; 116
    12b6:	99 e4       	ldi	r25, 0x49	; 73
    12b8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	5e e3       	ldi	r21, 0x3E	; 62
    12c4:	0e 94 91 0a 	call	0x1522	; 0x1522 <__subsf3>
    12c8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    12cc:	60 b9       	out	0x00, r22	; 0
    12ce:	dd 0f       	add	r29, r29
    12d0:	d2 b9       	out	0x02, r29	; 2
    12d2:	81 b1       	in	r24, 0x01	; 1
    12d4:	08 2b       	or	r16, r24
    12d6:	01 b9       	out	0x01, r16	; 1
    12d8:	c4 60       	ori	r28, 0x04	; 4
    12da:	c6 bf       	out	0x36, r28	; 54
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	0f 91       	pop	r16
    12e2:	08 95       	ret

000012e4 <I2C_Start>:
    12e4:	86 b7       	in	r24, 0x36	; 54
    12e6:	87 70       	andi	r24, 0x07	; 7
    12e8:	86 bf       	out	0x36, r24	; 54
    12ea:	86 b7       	in	r24, 0x36	; 54
    12ec:	80 6a       	ori	r24, 0xA0	; 160
    12ee:	86 bf       	out	0x36, r24	; 54
    12f0:	06 b6       	in	r0, 0x36	; 54
    12f2:	07 fe       	sbrs	r0, 7
    12f4:	fd cf       	rjmp	.-6      	; 0x12f0 <I2C_Start+0xc>
    12f6:	08 95       	ret

000012f8 <I2C_Stop>:
    12f8:	86 b7       	in	r24, 0x36	; 54
    12fa:	87 70       	andi	r24, 0x07	; 7
    12fc:	86 bf       	out	0x36, r24	; 54
    12fe:	86 b7       	in	r24, 0x36	; 54
    1300:	80 69       	ori	r24, 0x90	; 144
    1302:	86 bf       	out	0x36, r24	; 54
    1304:	08 95       	ret

00001306 <I2C_Read_Ack>:
    1306:	86 b7       	in	r24, 0x36	; 54
    1308:	87 70       	andi	r24, 0x07	; 7
    130a:	86 bf       	out	0x36, r24	; 54
    130c:	86 b7       	in	r24, 0x36	; 54
    130e:	80 6c       	ori	r24, 0xC0	; 192
    1310:	86 bf       	out	0x36, r24	; 54
    1312:	06 b6       	in	r0, 0x36	; 54
    1314:	07 fe       	sbrs	r0, 7
    1316:	fd cf       	rjmp	.-6      	; 0x1312 <I2C_Read_Ack+0xc>
    1318:	83 b1       	in	r24, 0x03	; 3
    131a:	08 95       	ret

0000131c <I2C_Read_NAck>:
    131c:	86 b7       	in	r24, 0x36	; 54
    131e:	87 70       	andi	r24, 0x07	; 7
    1320:	86 bf       	out	0x36, r24	; 54
    1322:	86 b7       	in	r24, 0x36	; 54
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	86 bf       	out	0x36, r24	; 54
    1328:	06 b6       	in	r0, 0x36	; 54
    132a:	07 fe       	sbrs	r0, 7
    132c:	fd cf       	rjmp	.-6      	; 0x1328 <I2C_Read_NAck+0xc>
    132e:	83 b1       	in	r24, 0x03	; 3
    1330:	08 95       	ret

00001332 <I2C_Write_byte>:
    1332:	83 b9       	out	0x03, r24	; 3
    1334:	86 b7       	in	r24, 0x36	; 54
    1336:	87 70       	andi	r24, 0x07	; 7
    1338:	86 bf       	out	0x36, r24	; 54
    133a:	86 b7       	in	r24, 0x36	; 54
    133c:	80 68       	ori	r24, 0x80	; 128
    133e:	86 bf       	out	0x36, r24	; 54
    1340:	06 b6       	in	r0, 0x36	; 54
    1342:	07 fe       	sbrs	r0, 7
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <I2C_Write_byte+0xe>
    1346:	08 95       	ret

00001348 <T0_Init>:
#include "Timer0.h"


void T0_Init( T0_Mode Mode , OC0_State OC0 , T0_Interrupt INT , T0_Prescaler CLK )
{
	TCCR0  =(FOC0_EN<<FOC0)|(Mode)|(OC0)|(CLK);
    1348:	26 2b       	or	r18, r22
    134a:	82 2b       	or	r24, r18
    134c:	83 bf       	out	0x33, r24	; 51
	TIMSK |=(INT);
    134e:	89 b7       	in	r24, 0x39	; 57
    1350:	48 2b       	or	r20, r24
    1352:	49 bf       	out	0x39, r20	; 57
	
	if(OC0 != T0_Disconnect_OC0 )
    1354:	66 23       	and	r22, r22
    1356:	31 f0       	breq	.+12     	; 0x1364 <T0_Init+0x1c>
	{
		PinDirection( GPIOB , OUTPUT ,PIN3);
    1358:	43 e0       	ldi	r20, 0x03	; 3
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	86 e3       	ldi	r24, 0x36	; 54
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 92 08 	call	0x1124	; 0x1124 <PinDirection>
    1364:	08 95       	ret

00001366 <T0_PWM>:
	}
}
void T0_PWM( float Duty )
{
	OCR0 = (uint8)((Duty/100.0)*255)+0.5;
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	48 ec       	ldi	r20, 0xC8	; 200
    136c:	52 e4       	ldi	r21, 0x42	; 66
    136e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	53 e4       	ldi	r21, 0x43	; 67
    137a:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
    137e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__floatsisf>
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 92 0a 	call	0x1524	; 0x1524 <__addsf3>
    1398:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    139c:	6c bf       	out	0x3c, r22	; 60
    139e:	08 95       	ret

000013a0 <Timer1_Init>:
    13a0:	82 2b       	or	r24, r18
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	48 2b       	or	r20, r24
    13a6:	59 2b       	or	r21, r25
    13a8:	64 2b       	or	r22, r20
    13aa:	75 2b       	or	r23, r21
    13ac:	7f bd       	out	0x2f, r23	; 47
    13ae:	6e bd       	out	0x2e, r22	; 46
    13b0:	89 b7       	in	r24, 0x39	; 57
    13b2:	80 61       	ori	r24, 0x10	; 16
    13b4:	89 bf       	out	0x39, r24	; 57
    13b6:	08 95       	ret

000013b8 <SchedulerUpdate>:
    13b8:	e9 e1       	ldi	r30, 0x19	; 25
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	2e e2       	ldi	r18, 0x2E	; 46
    13be:	31 e0       	ldi	r19, 0x01	; 1
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	89 2b       	or	r24, r25
    13c6:	89 f0       	breq	.+34     	; 0x13ea <SchedulerUpdate+0x32>
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	51 f4       	brne	.+20     	; 0x13e4 <SchedulerUpdate+0x2c>
    13d0:	86 81       	ldd	r24, Z+6	; 0x06
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	86 83       	std	Z+6, r24	; 0x06
    13d6:	84 81       	ldd	r24, Z+4	; 0x04
    13d8:	95 81       	ldd	r25, Z+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	31 f0       	breq	.+12     	; 0x13ea <SchedulerUpdate+0x32>
    13de:	93 83       	std	Z+3, r25	; 0x03
    13e0:	82 83       	std	Z+2, r24	; 0x02
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <SchedulerUpdate+0x32>
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	93 83       	std	Z+3, r25	; 0x03
    13e8:	82 83       	std	Z+2, r24	; 0x02
    13ea:	37 96       	adiw	r30, 0x07	; 7
    13ec:	e2 17       	cp	r30, r18
    13ee:	f3 07       	cpc	r31, r19
    13f0:	39 f7       	brne	.-50     	; 0x13c0 <SchedulerUpdate+0x8>
    13f2:	08 95       	ret

000013f4 <cresteTask>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	dc 01       	movw	r26, r24
    13fa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Task_Array>
    13fe:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Task_Array+0x1>
    1402:	89 2b       	or	r24, r25
    1404:	49 f0       	breq	.+18     	; 0x1418 <cresteTask+0x24>
    1406:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Task_Array+0x7>
    140a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Task_Array+0x8>
    140e:	89 2b       	or	r24, r25
    1410:	c1 f0       	breq	.+48     	; 0x1442 <cresteTask+0x4e>
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <cresteTask+0x28>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	fc 01       	movw	r30, r24
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	e8 1b       	sub	r30, r24
    142c:	f9 0b       	sbc	r31, r25
    142e:	e7 5e       	subi	r30, 0xE7	; 231
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	b1 83       	std	Z+1, r27	; 0x01
    1434:	a0 83       	st	Z, r26
    1436:	53 83       	std	Z+3, r21	; 0x03
    1438:	42 83       	std	Z+2, r20	; 0x02
    143a:	15 83       	std	Z+5, r17	; 0x05
    143c:	04 83       	std	Z+4, r16	; 0x04
    143e:	16 82       	std	Z+6, r1	; 0x06
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <cresteTask+0x54>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	ea cf       	rjmp	.-44     	; 0x141c <cresteTask+0x28>
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <Task_Delete>:
    144e:	fc 01       	movw	r30, r24
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	e8 1b       	sub	r30, r24
    145e:	f9 0b       	sbc	r31, r25
    1460:	e7 5e       	subi	r30, 0xE7	; 231
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	20 81       	ld	r18, Z
    1466:	31 81       	ldd	r19, Z+1	; 0x01
    1468:	23 2b       	or	r18, r19
    146a:	21 f4       	brne	.+8      	; 0x1474 <Task_Delete+0x26>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <ErrorFlag>
    1472:	08 95       	ret
    1474:	fc 01       	movw	r30, r24
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	e8 1b       	sub	r30, r24
    1484:	f9 0b       	sbc	r31, r25
    1486:	e7 5e       	subi	r30, 0xE7	; 231
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	11 82       	std	Z+1, r1	; 0x01
    148c:	10 82       	st	Z, r1
    148e:	13 82       	std	Z+3, r1	; 0x03
    1490:	12 82       	std	Z+2, r1	; 0x02
    1492:	15 82       	std	Z+5, r1	; 0x05
    1494:	14 82       	std	Z+4, r1	; 0x04
    1496:	16 82       	std	Z+6, r1	; 0x06
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	08 95       	ret

0000149c <SchedulerIntit>:
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 27 0a 	call	0x144e	; 0x144e <Task_Delete>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 27 0a 	call	0x144e	; 0x144e <Task_Delete>
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 27 0a 	call	0x144e	; 0x144e <Task_Delete>
    14b4:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <ErrorFlag>
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	88 e0       	ldi	r24, 0x08	; 8
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <Timer1_Init>
    14ca:	88 ee       	ldi	r24, 0xE8	; 232
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	9b bd       	out	0x2b, r25	; 43
    14d0:	8a bd       	out	0x2a, r24	; 42
    14d2:	08 95       	ret

000014d4 <Dispatcher>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	c9 e1       	ldi	r28, 0x19	; 25
    14de:	d1 e0       	ldi	r29, 0x01	; 1
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	88 23       	and	r24, r24
    14e8:	69 f0       	breq	.+26     	; 0x1504 <Dispatcher+0x30>
    14ea:	e8 81       	ld	r30, Y
    14ec:	f9 81       	ldd	r31, Y+1	; 0x01
    14ee:	09 95       	icall
    14f0:	8e 81       	ldd	r24, Y+6	; 0x06
    14f2:	81 50       	subi	r24, 0x01	; 1
    14f4:	8e 83       	std	Y+6, r24	; 0x06
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	89 2b       	or	r24, r25
    14fc:	19 f4       	brne	.+6      	; 0x1504 <Dispatcher+0x30>
    14fe:	c8 01       	movw	r24, r16
    1500:	0e 94 27 0a 	call	0x144e	; 0x144e <Task_Delete>
    1504:	0f 5f       	subi	r16, 0xFF	; 255
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	27 96       	adiw	r28, 0x07	; 7
    150a:	03 30       	cpi	r16, 0x03	; 3
    150c:	11 05       	cpc	r17, r1
    150e:	51 f7       	brne	.-44     	; 0x14e4 <Dispatcher+0x10>
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <SchedulerStart>:
    151a:	8f b7       	in	r24, 0x3f	; 63
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	8f bf       	out	0x3f, r24	; 63
    1520:	08 95       	ret

00001522 <__subsf3>:
    1522:	50 58       	subi	r21, 0x80	; 128

00001524 <__addsf3>:
    1524:	bb 27       	eor	r27, r27
    1526:	aa 27       	eor	r26, r26
    1528:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3x>
    152c:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_round>
    1530:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscA>
    1534:	38 f0       	brcs	.+14     	; 0x1544 <__addsf3+0x20>
    1536:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscB>
    153a:	20 f0       	brcs	.+8      	; 0x1544 <__addsf3+0x20>
    153c:	39 f4       	brne	.+14     	; 0x154c <__addsf3+0x28>
    153e:	9f 3f       	cpi	r25, 0xFF	; 255
    1540:	19 f4       	brne	.+6      	; 0x1548 <__addsf3+0x24>
    1542:	26 f4       	brtc	.+8      	; 0x154c <__addsf3+0x28>
    1544:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_nan>
    1548:	0e f4       	brtc	.+2      	; 0x154c <__addsf3+0x28>
    154a:	e0 95       	com	r30
    154c:	e7 fb       	bst	r30, 7
    154e:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>

00001552 <__addsf3x>:
    1552:	e9 2f       	mov	r30, r25
    1554:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_split3>
    1558:	58 f3       	brcs	.-42     	; 0x1530 <__addsf3+0xc>
    155a:	ba 17       	cp	r27, r26
    155c:	62 07       	cpc	r22, r18
    155e:	73 07       	cpc	r23, r19
    1560:	84 07       	cpc	r24, r20
    1562:	95 07       	cpc	r25, r21
    1564:	20 f0       	brcs	.+8      	; 0x156e <__addsf3x+0x1c>
    1566:	79 f4       	brne	.+30     	; 0x1586 <__addsf3x+0x34>
    1568:	a6 f5       	brtc	.+104    	; 0x15d2 <__addsf3x+0x80>
    156a:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_zero>
    156e:	0e f4       	brtc	.+2      	; 0x1572 <__addsf3x+0x20>
    1570:	e0 95       	com	r30
    1572:	0b 2e       	mov	r0, r27
    1574:	ba 2f       	mov	r27, r26
    1576:	a0 2d       	mov	r26, r0
    1578:	0b 01       	movw	r0, r22
    157a:	b9 01       	movw	r22, r18
    157c:	90 01       	movw	r18, r0
    157e:	0c 01       	movw	r0, r24
    1580:	ca 01       	movw	r24, r20
    1582:	a0 01       	movw	r20, r0
    1584:	11 24       	eor	r1, r1
    1586:	ff 27       	eor	r31, r31
    1588:	59 1b       	sub	r21, r25
    158a:	99 f0       	breq	.+38     	; 0x15b2 <__addsf3x+0x60>
    158c:	59 3f       	cpi	r21, 0xF9	; 249
    158e:	50 f4       	brcc	.+20     	; 0x15a4 <__addsf3x+0x52>
    1590:	50 3e       	cpi	r21, 0xE0	; 224
    1592:	68 f1       	brcs	.+90     	; 0x15ee <__addsf3x+0x9c>
    1594:	1a 16       	cp	r1, r26
    1596:	f0 40       	sbci	r31, 0x00	; 0
    1598:	a2 2f       	mov	r26, r18
    159a:	23 2f       	mov	r18, r19
    159c:	34 2f       	mov	r19, r20
    159e:	44 27       	eor	r20, r20
    15a0:	58 5f       	subi	r21, 0xF8	; 248
    15a2:	f3 cf       	rjmp	.-26     	; 0x158a <__addsf3x+0x38>
    15a4:	46 95       	lsr	r20
    15a6:	37 95       	ror	r19
    15a8:	27 95       	ror	r18
    15aa:	a7 95       	ror	r26
    15ac:	f0 40       	sbci	r31, 0x00	; 0
    15ae:	53 95       	inc	r21
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__addsf3x+0x52>
    15b2:	7e f4       	brtc	.+30     	; 0x15d2 <__addsf3x+0x80>
    15b4:	1f 16       	cp	r1, r31
    15b6:	ba 0b       	sbc	r27, r26
    15b8:	62 0b       	sbc	r22, r18
    15ba:	73 0b       	sbc	r23, r19
    15bc:	84 0b       	sbc	r24, r20
    15be:	ba f0       	brmi	.+46     	; 0x15ee <__addsf3x+0x9c>
    15c0:	91 50       	subi	r25, 0x01	; 1
    15c2:	a1 f0       	breq	.+40     	; 0x15ec <__addsf3x+0x9a>
    15c4:	ff 0f       	add	r31, r31
    15c6:	bb 1f       	adc	r27, r27
    15c8:	66 1f       	adc	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	c2 f7       	brpl	.-16     	; 0x15c0 <__addsf3x+0x6e>
    15d0:	0e c0       	rjmp	.+28     	; 0x15ee <__addsf3x+0x9c>
    15d2:	ba 0f       	add	r27, r26
    15d4:	62 1f       	adc	r22, r18
    15d6:	73 1f       	adc	r23, r19
    15d8:	84 1f       	adc	r24, r20
    15da:	48 f4       	brcc	.+18     	; 0x15ee <__addsf3x+0x9c>
    15dc:	87 95       	ror	r24
    15de:	77 95       	ror	r23
    15e0:	67 95       	ror	r22
    15e2:	b7 95       	ror	r27
    15e4:	f7 95       	ror	r31
    15e6:	9e 3f       	cpi	r25, 0xFE	; 254
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <__addsf3x+0x9a>
    15ea:	b0 cf       	rjmp	.-160    	; 0x154c <__addsf3+0x28>
    15ec:	93 95       	inc	r25
    15ee:	88 0f       	add	r24, r24
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <__addsf3x+0xa2>
    15f2:	99 27       	eor	r25, r25
    15f4:	ee 0f       	add	r30, r30
    15f6:	97 95       	ror	r25
    15f8:	87 95       	ror	r24
    15fa:	08 95       	ret

000015fc <__divsf3>:
    15fc:	0e 94 12 0b 	call	0x1624	; 0x1624 <__divsf3x>
    1600:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_round>
    1604:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscB>
    1608:	58 f0       	brcs	.+22     	; 0x1620 <__divsf3+0x24>
    160a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscA>
    160e:	40 f0       	brcs	.+16     	; 0x1620 <__divsf3+0x24>
    1610:	29 f4       	brne	.+10     	; 0x161c <__divsf3+0x20>
    1612:	5f 3f       	cpi	r21, 0xFF	; 255
    1614:	29 f0       	breq	.+10     	; 0x1620 <__divsf3+0x24>
    1616:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>
    161a:	51 11       	cpse	r21, r1
    161c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_szero>
    1620:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_nan>

00001624 <__divsf3x>:
    1624:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_split3>
    1628:	68 f3       	brcs	.-38     	; 0x1604 <__divsf3+0x8>

0000162a <__divsf3_pse>:
    162a:	99 23       	and	r25, r25
    162c:	b1 f3       	breq	.-20     	; 0x161a <__divsf3+0x1e>
    162e:	55 23       	and	r21, r21
    1630:	91 f3       	breq	.-28     	; 0x1616 <__divsf3+0x1a>
    1632:	95 1b       	sub	r25, r21
    1634:	55 0b       	sbc	r21, r21
    1636:	bb 27       	eor	r27, r27
    1638:	aa 27       	eor	r26, r26
    163a:	62 17       	cp	r22, r18
    163c:	73 07       	cpc	r23, r19
    163e:	84 07       	cpc	r24, r20
    1640:	38 f0       	brcs	.+14     	; 0x1650 <__divsf3_pse+0x26>
    1642:	9f 5f       	subi	r25, 0xFF	; 255
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	44 1f       	adc	r20, r20
    164c:	aa 1f       	adc	r26, r26
    164e:	a9 f3       	breq	.-22     	; 0x163a <__divsf3_pse+0x10>
    1650:	35 d0       	rcall	.+106    	; 0x16bc <__divsf3_pse+0x92>
    1652:	0e 2e       	mov	r0, r30
    1654:	3a f0       	brmi	.+14     	; 0x1664 <__divsf3_pse+0x3a>
    1656:	e0 e8       	ldi	r30, 0x80	; 128
    1658:	32 d0       	rcall	.+100    	; 0x16be <__divsf3_pse+0x94>
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	e6 95       	lsr	r30
    1660:	00 1c       	adc	r0, r0
    1662:	ca f7       	brpl	.-14     	; 0x1656 <__divsf3_pse+0x2c>
    1664:	2b d0       	rcall	.+86     	; 0x16bc <__divsf3_pse+0x92>
    1666:	fe 2f       	mov	r31, r30
    1668:	29 d0       	rcall	.+82     	; 0x16bc <__divsf3_pse+0x92>
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	bb 1f       	adc	r27, r27
    1672:	26 17       	cp	r18, r22
    1674:	37 07       	cpc	r19, r23
    1676:	48 07       	cpc	r20, r24
    1678:	ab 07       	cpc	r26, r27
    167a:	b0 e8       	ldi	r27, 0x80	; 128
    167c:	09 f0       	breq	.+2      	; 0x1680 <__divsf3_pse+0x56>
    167e:	bb 0b       	sbc	r27, r27
    1680:	80 2d       	mov	r24, r0
    1682:	bf 01       	movw	r22, r30
    1684:	ff 27       	eor	r31, r31
    1686:	93 58       	subi	r25, 0x83	; 131
    1688:	5f 4f       	sbci	r21, 0xFF	; 255
    168a:	3a f0       	brmi	.+14     	; 0x169a <__divsf3_pse+0x70>
    168c:	9e 3f       	cpi	r25, 0xFE	; 254
    168e:	51 05       	cpc	r21, r1
    1690:	78 f0       	brcs	.+30     	; 0x16b0 <__divsf3_pse+0x86>
    1692:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>
    1696:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_szero>
    169a:	5f 3f       	cpi	r21, 0xFF	; 255
    169c:	e4 f3       	brlt	.-8      	; 0x1696 <__divsf3_pse+0x6c>
    169e:	98 3e       	cpi	r25, 0xE8	; 232
    16a0:	d4 f3       	brlt	.-12     	; 0x1696 <__divsf3_pse+0x6c>
    16a2:	86 95       	lsr	r24
    16a4:	77 95       	ror	r23
    16a6:	67 95       	ror	r22
    16a8:	b7 95       	ror	r27
    16aa:	f7 95       	ror	r31
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <__divsf3_pse+0x78>
    16b0:	88 0f       	add	r24, r24
    16b2:	91 1d       	adc	r25, r1
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	97 f9       	bld	r25, 7
    16ba:	08 95       	ret
    16bc:	e1 e0       	ldi	r30, 0x01	; 1
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	bb 1f       	adc	r27, r27
    16c6:	62 17       	cp	r22, r18
    16c8:	73 07       	cpc	r23, r19
    16ca:	84 07       	cpc	r24, r20
    16cc:	ba 07       	cpc	r27, r26
    16ce:	20 f0       	brcs	.+8      	; 0x16d8 <__divsf3_pse+0xae>
    16d0:	62 1b       	sub	r22, r18
    16d2:	73 0b       	sbc	r23, r19
    16d4:	84 0b       	sbc	r24, r20
    16d6:	ba 0b       	sbc	r27, r26
    16d8:	ee 1f       	adc	r30, r30
    16da:	88 f7       	brcc	.-30     	; 0x16be <__divsf3_pse+0x94>
    16dc:	e0 95       	com	r30
    16de:	08 95       	ret

000016e0 <__fixunssfsi>:
    16e0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fp_splitA>
    16e4:	88 f0       	brcs	.+34     	; 0x1708 <__fixunssfsi+0x28>
    16e6:	9f 57       	subi	r25, 0x7F	; 127
    16e8:	98 f0       	brcs	.+38     	; 0x1710 <__fixunssfsi+0x30>
    16ea:	b9 2f       	mov	r27, r25
    16ec:	99 27       	eor	r25, r25
    16ee:	b7 51       	subi	r27, 0x17	; 23
    16f0:	b0 f0       	brcs	.+44     	; 0x171e <__fixunssfsi+0x3e>
    16f2:	e1 f0       	breq	.+56     	; 0x172c <__fixunssfsi+0x4c>
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	1a f0       	brmi	.+6      	; 0x1704 <__fixunssfsi+0x24>
    16fe:	ba 95       	dec	r27
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__fixunssfsi+0x14>
    1702:	14 c0       	rjmp	.+40     	; 0x172c <__fixunssfsi+0x4c>
    1704:	b1 30       	cpi	r27, 0x01	; 1
    1706:	91 f0       	breq	.+36     	; 0x172c <__fixunssfsi+0x4c>
    1708:	0e 94 26 0c 	call	0x184c	; 0x184c <__fp_zero>
    170c:	b1 e0       	ldi	r27, 0x01	; 1
    170e:	08 95       	ret
    1710:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_zero>
    1714:	67 2f       	mov	r22, r23
    1716:	78 2f       	mov	r23, r24
    1718:	88 27       	eor	r24, r24
    171a:	b8 5f       	subi	r27, 0xF8	; 248
    171c:	39 f0       	breq	.+14     	; 0x172c <__fixunssfsi+0x4c>
    171e:	b9 3f       	cpi	r27, 0xF9	; 249
    1720:	cc f3       	brlt	.-14     	; 0x1714 <__fixunssfsi+0x34>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b3 95       	inc	r27
    172a:	d9 f7       	brne	.-10     	; 0x1722 <__fixunssfsi+0x42>
    172c:	3e f4       	brtc	.+14     	; 0x173c <__fixunssfsi+0x5c>
    172e:	90 95       	com	r25
    1730:	80 95       	com	r24
    1732:	70 95       	com	r23
    1734:	61 95       	neg	r22
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	08 95       	ret

0000173e <__floatunsisf>:
    173e:	e8 94       	clt
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <__floatsisf+0x12>

00001742 <__floatsisf>:
    1742:	97 fb       	bst	r25, 7
    1744:	3e f4       	brtc	.+14     	; 0x1754 <__floatsisf+0x12>
    1746:	90 95       	com	r25
    1748:	80 95       	com	r24
    174a:	70 95       	com	r23
    174c:	61 95       	neg	r22
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	99 23       	and	r25, r25
    1756:	a9 f0       	breq	.+42     	; 0x1782 <__floatsisf+0x40>
    1758:	f9 2f       	mov	r31, r25
    175a:	96 e9       	ldi	r25, 0x96	; 150
    175c:	bb 27       	eor	r27, r27
    175e:	93 95       	inc	r25
    1760:	f6 95       	lsr	r31
    1762:	87 95       	ror	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	b7 95       	ror	r27
    176a:	f1 11       	cpse	r31, r1
    176c:	f8 cf       	rjmp	.-16     	; 0x175e <__floatsisf+0x1c>
    176e:	fa f4       	brpl	.+62     	; 0x17ae <__floatsisf+0x6c>
    1770:	bb 0f       	add	r27, r27
    1772:	11 f4       	brne	.+4      	; 0x1778 <__floatsisf+0x36>
    1774:	60 ff       	sbrs	r22, 0
    1776:	1b c0       	rjmp	.+54     	; 0x17ae <__floatsisf+0x6c>
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	8f 4f       	sbci	r24, 0xFF	; 255
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <__floatsisf+0x6c>
    1782:	88 23       	and	r24, r24
    1784:	11 f0       	breq	.+4      	; 0x178a <__floatsisf+0x48>
    1786:	96 e9       	ldi	r25, 0x96	; 150
    1788:	11 c0       	rjmp	.+34     	; 0x17ac <__floatsisf+0x6a>
    178a:	77 23       	and	r23, r23
    178c:	21 f0       	breq	.+8      	; 0x1796 <__floatsisf+0x54>
    178e:	9e e8       	ldi	r25, 0x8E	; 142
    1790:	87 2f       	mov	r24, r23
    1792:	76 2f       	mov	r23, r22
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <__floatsisf+0x5e>
    1796:	66 23       	and	r22, r22
    1798:	71 f0       	breq	.+28     	; 0x17b6 <__floatsisf+0x74>
    179a:	96 e8       	ldi	r25, 0x86	; 134
    179c:	86 2f       	mov	r24, r22
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	2a f0       	brmi	.+10     	; 0x17ae <__floatsisf+0x6c>
    17a4:	9a 95       	dec	r25
    17a6:	66 0f       	add	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	da f7       	brpl	.-10     	; 0x17a4 <__floatsisf+0x62>
    17ae:	88 0f       	add	r24, r24
    17b0:	96 95       	lsr	r25
    17b2:	87 95       	ror	r24
    17b4:	97 f9       	bld	r25, 7
    17b6:	08 95       	ret

000017b8 <__fp_inf>:
    17b8:	97 f9       	bld	r25, 7
    17ba:	9f 67       	ori	r25, 0x7F	; 127
    17bc:	80 e8       	ldi	r24, 0x80	; 128
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	08 95       	ret

000017c4 <__fp_nan>:
    17c4:	9f ef       	ldi	r25, 0xFF	; 255
    17c6:	80 ec       	ldi	r24, 0xC0	; 192
    17c8:	08 95       	ret

000017ca <__fp_pscA>:
    17ca:	00 24       	eor	r0, r0
    17cc:	0a 94       	dec	r0
    17ce:	16 16       	cp	r1, r22
    17d0:	17 06       	cpc	r1, r23
    17d2:	18 06       	cpc	r1, r24
    17d4:	09 06       	cpc	r0, r25
    17d6:	08 95       	ret

000017d8 <__fp_pscB>:
    17d8:	00 24       	eor	r0, r0
    17da:	0a 94       	dec	r0
    17dc:	12 16       	cp	r1, r18
    17de:	13 06       	cpc	r1, r19
    17e0:	14 06       	cpc	r1, r20
    17e2:	05 06       	cpc	r0, r21
    17e4:	08 95       	ret

000017e6 <__fp_round>:
    17e6:	09 2e       	mov	r0, r25
    17e8:	03 94       	inc	r0
    17ea:	00 0c       	add	r0, r0
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__fp_round+0xc>
    17ee:	88 23       	and	r24, r24
    17f0:	52 f0       	brmi	.+20     	; 0x1806 <__fp_round+0x20>
    17f2:	bb 0f       	add	r27, r27
    17f4:	40 f4       	brcc	.+16     	; 0x1806 <__fp_round+0x20>
    17f6:	bf 2b       	or	r27, r31
    17f8:	11 f4       	brne	.+4      	; 0x17fe <__fp_round+0x18>
    17fa:	60 ff       	sbrs	r22, 0
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <__fp_round+0x20>
    17fe:	6f 5f       	subi	r22, 0xFF	; 255
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	08 95       	ret

00001808 <__fp_split3>:
    1808:	57 fd       	sbrc	r21, 7
    180a:	90 58       	subi	r25, 0x80	; 128
    180c:	44 0f       	add	r20, r20
    180e:	55 1f       	adc	r21, r21
    1810:	59 f0       	breq	.+22     	; 0x1828 <__fp_splitA+0x10>
    1812:	5f 3f       	cpi	r21, 0xFF	; 255
    1814:	71 f0       	breq	.+28     	; 0x1832 <__fp_splitA+0x1a>
    1816:	47 95       	ror	r20

00001818 <__fp_splitA>:
    1818:	88 0f       	add	r24, r24
    181a:	97 fb       	bst	r25, 7
    181c:	99 1f       	adc	r25, r25
    181e:	61 f0       	breq	.+24     	; 0x1838 <__fp_splitA+0x20>
    1820:	9f 3f       	cpi	r25, 0xFF	; 255
    1822:	79 f0       	breq	.+30     	; 0x1842 <__fp_splitA+0x2a>
    1824:	87 95       	ror	r24
    1826:	08 95       	ret
    1828:	12 16       	cp	r1, r18
    182a:	13 06       	cpc	r1, r19
    182c:	14 06       	cpc	r1, r20
    182e:	55 1f       	adc	r21, r21
    1830:	f2 cf       	rjmp	.-28     	; 0x1816 <__fp_split3+0xe>
    1832:	46 95       	lsr	r20
    1834:	f1 df       	rcall	.-30     	; 0x1818 <__fp_splitA>
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <__fp_splitA+0x30>
    1838:	16 16       	cp	r1, r22
    183a:	17 06       	cpc	r1, r23
    183c:	18 06       	cpc	r1, r24
    183e:	99 1f       	adc	r25, r25
    1840:	f1 cf       	rjmp	.-30     	; 0x1824 <__fp_splitA+0xc>
    1842:	86 95       	lsr	r24
    1844:	71 05       	cpc	r23, r1
    1846:	61 05       	cpc	r22, r1
    1848:	08 94       	sec
    184a:	08 95       	ret

0000184c <__fp_zero>:
    184c:	e8 94       	clt

0000184e <__fp_szero>:
    184e:	bb 27       	eor	r27, r27
    1850:	66 27       	eor	r22, r22
    1852:	77 27       	eor	r23, r23
    1854:	cb 01       	movw	r24, r22
    1856:	97 f9       	bld	r25, 7
    1858:	08 95       	ret

0000185a <__mulsf3>:
    185a:	0e 94 40 0c 	call	0x1880	; 0x1880 <__mulsf3x>
    185e:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_round>
    1862:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscA>
    1866:	38 f0       	brcs	.+14     	; 0x1876 <__mulsf3+0x1c>
    1868:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscB>
    186c:	20 f0       	brcs	.+8      	; 0x1876 <__mulsf3+0x1c>
    186e:	95 23       	and	r25, r21
    1870:	11 f0       	breq	.+4      	; 0x1876 <__mulsf3+0x1c>
    1872:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>
    1876:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_nan>
    187a:	11 24       	eor	r1, r1
    187c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_szero>

00001880 <__mulsf3x>:
    1880:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_split3>
    1884:	70 f3       	brcs	.-36     	; 0x1862 <__mulsf3+0x8>

00001886 <__mulsf3_pse>:
    1886:	95 9f       	mul	r25, r21
    1888:	c1 f3       	breq	.-16     	; 0x187a <__mulsf3+0x20>
    188a:	95 0f       	add	r25, r21
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	55 1f       	adc	r21, r21
    1890:	62 9f       	mul	r22, r18
    1892:	f0 01       	movw	r30, r0
    1894:	72 9f       	mul	r23, r18
    1896:	bb 27       	eor	r27, r27
    1898:	f0 0d       	add	r31, r0
    189a:	b1 1d       	adc	r27, r1
    189c:	63 9f       	mul	r22, r19
    189e:	aa 27       	eor	r26, r26
    18a0:	f0 0d       	add	r31, r0
    18a2:	b1 1d       	adc	r27, r1
    18a4:	aa 1f       	adc	r26, r26
    18a6:	64 9f       	mul	r22, r20
    18a8:	66 27       	eor	r22, r22
    18aa:	b0 0d       	add	r27, r0
    18ac:	a1 1d       	adc	r26, r1
    18ae:	66 1f       	adc	r22, r22
    18b0:	82 9f       	mul	r24, r18
    18b2:	22 27       	eor	r18, r18
    18b4:	b0 0d       	add	r27, r0
    18b6:	a1 1d       	adc	r26, r1
    18b8:	62 1f       	adc	r22, r18
    18ba:	73 9f       	mul	r23, r19
    18bc:	b0 0d       	add	r27, r0
    18be:	a1 1d       	adc	r26, r1
    18c0:	62 1f       	adc	r22, r18
    18c2:	83 9f       	mul	r24, r19
    18c4:	a0 0d       	add	r26, r0
    18c6:	61 1d       	adc	r22, r1
    18c8:	22 1f       	adc	r18, r18
    18ca:	74 9f       	mul	r23, r20
    18cc:	33 27       	eor	r19, r19
    18ce:	a0 0d       	add	r26, r0
    18d0:	61 1d       	adc	r22, r1
    18d2:	23 1f       	adc	r18, r19
    18d4:	84 9f       	mul	r24, r20
    18d6:	60 0d       	add	r22, r0
    18d8:	21 1d       	adc	r18, r1
    18da:	82 2f       	mov	r24, r18
    18dc:	76 2f       	mov	r23, r22
    18de:	6a 2f       	mov	r22, r26
    18e0:	11 24       	eor	r1, r1
    18e2:	9f 57       	subi	r25, 0x7F	; 127
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	9a f0       	brmi	.+38     	; 0x190e <__mulsf3_pse+0x88>
    18e8:	f1 f0       	breq	.+60     	; 0x1926 <__mulsf3_pse+0xa0>
    18ea:	88 23       	and	r24, r24
    18ec:	4a f0       	brmi	.+18     	; 0x1900 <__mulsf3_pse+0x7a>
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	bb 1f       	adc	r27, r27
    18f4:	66 1f       	adc	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	91 50       	subi	r25, 0x01	; 1
    18fc:	50 40       	sbci	r21, 0x00	; 0
    18fe:	a9 f7       	brne	.-22     	; 0x18ea <__mulsf3_pse+0x64>
    1900:	9e 3f       	cpi	r25, 0xFE	; 254
    1902:	51 05       	cpc	r21, r1
    1904:	80 f0       	brcs	.+32     	; 0x1926 <__mulsf3_pse+0xa0>
    1906:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>
    190a:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__fp_szero>
    190e:	5f 3f       	cpi	r21, 0xFF	; 255
    1910:	e4 f3       	brlt	.-8      	; 0x190a <__mulsf3_pse+0x84>
    1912:	98 3e       	cpi	r25, 0xE8	; 232
    1914:	d4 f3       	brlt	.-12     	; 0x190a <__mulsf3_pse+0x84>
    1916:	86 95       	lsr	r24
    1918:	77 95       	ror	r23
    191a:	67 95       	ror	r22
    191c:	b7 95       	ror	r27
    191e:	f7 95       	ror	r31
    1920:	e7 95       	ror	r30
    1922:	9f 5f       	subi	r25, 0xFF	; 255
    1924:	c1 f7       	brne	.-16     	; 0x1916 <__mulsf3_pse+0x90>
    1926:	fe 2b       	or	r31, r30
    1928:	88 0f       	add	r24, r24
    192a:	91 1d       	adc	r25, r1
    192c:	96 95       	lsr	r25
    192e:	87 95       	ror	r24
    1930:	97 f9       	bld	r25, 7
    1932:	08 95       	ret

00001934 <__tablejump2__>:
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	05 90       	lpm	r0, Z+
    193a:	f4 91       	lpm	r31, Z
    193c:	e0 2d       	mov	r30, r0
    193e:	09 94       	ijmp

00001940 <strcat>:
    1940:	fb 01       	movw	r30, r22
    1942:	dc 01       	movw	r26, r24
    1944:	0d 90       	ld	r0, X+
    1946:	00 20       	and	r0, r0
    1948:	e9 f7       	brne	.-6      	; 0x1944 <strcat+0x4>
    194a:	11 97       	sbiw	r26, 0x01	; 1
    194c:	01 90       	ld	r0, Z+
    194e:	0d 92       	st	X+, r0
    1950:	00 20       	and	r0, r0
    1952:	e1 f7       	brne	.-8      	; 0x194c <strcat+0xc>
    1954:	08 95       	ret

00001956 <__itoa_ncheck>:
    1956:	bb 27       	eor	r27, r27
    1958:	4a 30       	cpi	r20, 0x0A	; 10
    195a:	31 f4       	brne	.+12     	; 0x1968 <__itoa_ncheck+0x12>
    195c:	99 23       	and	r25, r25
    195e:	22 f4       	brpl	.+8      	; 0x1968 <__itoa_ncheck+0x12>
    1960:	bd e2       	ldi	r27, 0x2D	; 45
    1962:	90 95       	com	r25
    1964:	81 95       	neg	r24
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__utoa_common>

0000196c <__utoa_ncheck>:
    196c:	bb 27       	eor	r27, r27

0000196e <__utoa_common>:
    196e:	fb 01       	movw	r30, r22
    1970:	55 27       	eor	r21, r21
    1972:	aa 27       	eor	r26, r26
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	aa 1f       	adc	r26, r26
    197a:	a4 17       	cp	r26, r20
    197c:	10 f0       	brcs	.+4      	; 0x1982 <__utoa_common+0x14>
    197e:	a4 1b       	sub	r26, r20
    1980:	83 95       	inc	r24
    1982:	50 51       	subi	r21, 0x10	; 16
    1984:	b9 f7       	brne	.-18     	; 0x1974 <__utoa_common+0x6>
    1986:	a0 5d       	subi	r26, 0xD0	; 208
    1988:	aa 33       	cpi	r26, 0x3A	; 58
    198a:	08 f0       	brcs	.+2      	; 0x198e <__utoa_common+0x20>
    198c:	a9 5d       	subi	r26, 0xD9	; 217
    198e:	a1 93       	st	Z+, r26
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	79 f7       	brne	.-34     	; 0x1972 <__utoa_common+0x4>
    1994:	b1 11       	cpse	r27, r1
    1996:	b1 93       	st	Z+, r27
    1998:	11 92       	st	Z+, r1
    199a:	cb 01       	movw	r24, r22
    199c:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <strrev>

000019a0 <strrev>:
    19a0:	dc 01       	movw	r26, r24
    19a2:	fc 01       	movw	r30, r24
    19a4:	67 2f       	mov	r22, r23
    19a6:	71 91       	ld	r23, Z+
    19a8:	77 23       	and	r23, r23
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <strrev+0x4>
    19ac:	32 97       	sbiw	r30, 0x02	; 2
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <strrev+0x18>
    19b0:	7c 91       	ld	r23, X
    19b2:	6d 93       	st	X+, r22
    19b4:	70 83       	st	Z, r23
    19b6:	62 91       	ld	r22, -Z
    19b8:	ae 17       	cp	r26, r30
    19ba:	bf 07       	cpc	r27, r31
    19bc:	c8 f3       	brcs	.-14     	; 0x19b0 <strrev+0x10>
    19be:	08 95       	ret

000019c0 <_exit>:
    19c0:	f8 94       	cli

000019c2 <__stop_program>:
    19c2:	ff cf       	rjmp	.-2      	; 0x19c2 <__stop_program>
